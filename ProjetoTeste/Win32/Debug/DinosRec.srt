1
00:00:00,000 --> 00:00:08,000
Alô, estou me ouvindo bem?

2
00:00:08,000 --> 00:00:10,000
Choc!

3
00:00:10,000 --> 00:00:18,000
Bom, então vamos lá pessoal, eu vou estar falando sobre Cloud com um Delphi, né?

4
00:00:18,000 --> 00:00:21,000
Descomplicando, mostrando mais a parte prática da Cloud.

5
00:00:21,000 --> 00:00:25,000
Deixa eu soltar aqui pro editor.

6
00:00:25,000 --> 00:00:29,000
Certo, o que que eu vou estar abordando aqui hoje, né?

7
00:00:29,000 --> 00:00:37,000
A gente vai estar vendo os monolitos, os microserviços, o que são as fases, as funções, as services, algumas arquiteturas.

8
00:00:37,000 --> 00:00:41,000
O que que é o Google Cloud Platform, o GCP?

9
00:00:41,000 --> 00:00:43,000
Vamos estar falando bem sobre o Cinto, sobre Docker.

10
00:00:43,000 --> 00:00:46,000
Aí vamos entrar um pouco na parte prática.

11
00:00:46,000 --> 00:00:53,000
Tem os contatos ali no final e vou abrir o espaço de dúvidas também no final.

12
00:00:53,000 --> 00:00:56,000
Certo, pra quem não me conhece, eu sou o Daniel Fernandes.

13
00:00:56,000 --> 00:00:58,000
Sou do Ovidor Senor aqui da AQUA.

14
00:00:58,000 --> 00:01:01,000
Tenho mais de sete anos de experiência com o Delphi.

15
00:01:01,000 --> 00:01:05,000
Sou graduado em gestão da TI pela FATEC de Braga São Paulo Lista.

16
00:01:05,000 --> 00:01:08,000
Sou pós-graduado também em geria de software pela estácio.

17
00:01:08,000 --> 00:01:11,000
Sou o criador do Dinos Devs no Instagram.

18
00:01:11,000 --> 00:01:17,000
Fiz um componente que me levou pra conference no ano passado, que é o LibreOffice pra Delphi, que é o Dinos Offices.

19
00:01:17,000 --> 00:01:25,000
E fui palestrante na DelphiCon de 2023, na conference do ano passado e desse ano também.

20
00:01:26,000 --> 00:01:28,000
Certo, então vamos começar.

21
00:01:28,000 --> 00:01:30,000
O que são os monolitos?

22
00:01:30,000 --> 00:01:35,000
O monolito é uma arquitetura de software, onde todas as funcionalidades estão no local só.

23
00:01:35,000 --> 00:01:43,000
Então aqui na representação do monolito, que a gente tem forma de pagamento, pedido, cadastro,

24
00:01:43,000 --> 00:01:48,000
tudo numa única instância e essa instância, ela comunica com o único banco de dados.

25
00:01:48,000 --> 00:01:53,000
E a interface de usuário consome essa instância do monolito.

26
00:01:53,000 --> 00:01:57,000
Há alguns casos que a extensa do usuário está até dentro do monolito também.

27
00:01:59,000 --> 00:02:02,000
E quais são as vantagens de se utilizar monolito?

28
00:02:02,000 --> 00:02:05,000
É a simplicidade inicial na arquitetura.

29
00:02:05,000 --> 00:02:10,000
Ele é bom pra criar MVPs, porque é bem fácil no começo do desenvolvimento.

30
00:02:10,000 --> 00:02:16,000
A coisão da equipe de Devs, porque só utiliza uma única linguagem.

31
00:02:16,000 --> 00:02:22,000
É simples pra fazer deploy na produção, porque ao atualizar um pedido,

32
00:02:22,000 --> 00:02:24,000
você vai atualizar toda a instância dele.

33
00:02:24,000 --> 00:02:27,000
Então você não tem que se preocupar com diversos serviços espalhados.

34
00:02:27,000 --> 00:02:31,000
E é fácil pra debugar, porque toda regra de negócio está em um único local.

35
00:02:31,000 --> 00:02:37,000
Tem até uma referência aqui do Martin Fowler, que ele fala pra se usar primeiro o monolito,

36
00:02:37,000 --> 00:02:39,000
o monolito de first.

37
00:02:39,000 --> 00:02:43,000
E nessa abordagem aqui que fala você para começar com o monolito.

38
00:02:43,000 --> 00:02:45,000
Então há diversas discussões sobre...

39
00:02:45,000 --> 00:02:47,000
Eu achei bem interessante o esporte dele.

40
00:02:49,000 --> 00:02:53,000
E quais são os desafios dos monolitos?

41
00:02:53,000 --> 00:02:55,000
Tudo está em um único local.

42
00:02:55,000 --> 00:02:59,000
Então isso tem uma alta dependência,

43
00:02:59,000 --> 00:03:02,000
que você não consegue mexer em uma única parte de seu software

44
00:03:02,000 --> 00:03:05,000
sem afetar as demais camadas.

45
00:03:05,000 --> 00:03:10,000
A alta dependência demora para um novo Devs habituar.

46
00:03:10,000 --> 00:03:13,000
Então para aprender toda a regra de negócio,

47
00:03:13,000 --> 00:03:16,000
você tem que entender o sistema como um todo,

48
00:03:16,000 --> 00:03:20,000
uma boa parte dele para conseguir se habituar ao sistema.

49
00:03:20,000 --> 00:03:24,000
As problemas de uma parte do software afeta ele como um todo.

50
00:03:24,000 --> 00:03:27,000
Se você tem que atualizar um label ali no caixa,

51
00:03:27,000 --> 00:03:29,000
você vai ter que atualizar todo o seu sistema,

52
00:03:29,000 --> 00:03:31,000
só por conta de um leigo errado.

53
00:03:31,000 --> 00:03:35,000
Abaixa a escalabilidade, justamente por isso,

54
00:03:35,000 --> 00:03:39,000
você não consegue escalar também para ser reaproveitado.

55
00:03:39,000 --> 00:03:42,000
Basos de dados normalmente são gigantes,

56
00:03:42,000 --> 00:03:45,000
e utiliza-se uma única tecnologia.

57
00:03:47,000 --> 00:03:49,000
E os microserviços?

58
00:03:49,000 --> 00:03:54,000
Os microserviços veem entre aspas para resolver o problema do monolito.

59
00:03:54,000 --> 00:03:57,000
Não estou aqui para definir monolito nem microserviços,

60
00:03:57,000 --> 00:04:00,000
só colocando as abordagens aqui.

61
00:04:00,000 --> 00:04:05,000
O microserviço também é um desenho de arquitetura de software,

62
00:04:05,000 --> 00:04:09,000
onde são definidos conjuntos pequenos de serviços independentes,

63
00:04:09,000 --> 00:04:14,000
cada um executa uma única funcionalidade específica.

64
00:04:14,000 --> 00:04:18,000
E cada serviço é alpergado entre uma entidade.

65
00:04:18,000 --> 00:04:21,000
Então aqui na representatividade dele,

66
00:04:21,000 --> 00:04:24,000
a gente pegou aquele desenho do monolito

67
00:04:24,000 --> 00:04:26,000
e passou ele para microserviços.

68
00:04:26,000 --> 00:04:28,000
Então cada um ganha sua instância.

69
00:04:28,000 --> 00:04:32,000
Aqui temos as vendas, os cadastros, os pedidos,

70
00:04:32,000 --> 00:04:36,000
e cada monolito conversa agora com o seu próprio banco de dados.

71
00:04:36,000 --> 00:04:40,000
Cada microserviço comunica-se com o seu próprio banco de dados.

72
00:04:44,000 --> 00:04:46,000
E quais as vantagens?

73
00:04:46,000 --> 00:04:48,000
Quando utilizarem os monolitos,

74
00:04:48,000 --> 00:04:51,000
aqui tem uma outra representatividade dele.

75
00:04:51,000 --> 00:04:53,000
É uma aplicação grande e complexa,

76
00:04:53,000 --> 00:04:56,000
que precisa ser altamente escalada e dimensionada,

77
00:04:56,000 --> 00:05:00,000
quando a aplicação possui muitos domínios e subdomínios,

78
00:05:00,000 --> 00:05:03,000
e quando a necessidade de integração e implementação continua.

79
00:05:03,000 --> 00:05:06,000
A gente vai ver um pouco mais a fundo esses tópicos também.

80
00:05:06,000 --> 00:05:10,000
Aqui é um desenho de como a estrutura de um microserviço.

81
00:05:10,000 --> 00:05:12,000
E aqui tem uma frase que eu achei bem legal,

82
00:05:12,000 --> 00:05:14,000
que é vincular dos microserviços.

83
00:05:14,000 --> 00:05:17,000
Não use uma basuca para matar uma formiga.

84
00:05:17,000 --> 00:05:19,000
Então tem que analisar muito bem essa arquitetura

85
00:05:19,000 --> 00:05:21,000
se vale a pena para o seu projeto.

86
00:05:23,000 --> 00:05:26,000
E quais são as características do microserviço?

87
00:05:26,000 --> 00:05:29,000
Dividir as tarefas de formas independentes

88
00:05:29,000 --> 00:05:32,000
no serviço deve implementar apenas uma função,

89
00:05:32,000 --> 00:05:35,000
a troca de serviço é feita de maneira ágil,

90
00:05:35,000 --> 00:05:39,000
a comunicação pelos microserviços é feita via a page,

91
00:05:39,000 --> 00:05:43,000
é construída através de pequenas responsabilidades,

92
00:05:43,000 --> 00:05:46,000
tem características de ter depois automatizados,

93
00:05:46,000 --> 00:05:48,000
isso depende mais do seu DevOps.

94
00:05:48,000 --> 00:05:51,000
E pode-se usar várias linguagens diferentes.

95
00:05:51,000 --> 00:05:53,000
Aqui tem uma representação também.

96
00:05:53,000 --> 00:05:55,000
Aqui é o que vamos construir.

97
00:05:55,000 --> 00:05:58,000
É um cliente, uma API Gateway,

98
00:05:58,000 --> 00:06:01,000
um orquestrador de containers, o container,

99
00:06:01,000 --> 00:06:03,000
o orquestrador vai ser o Google ArchPact,

100
00:06:03,000 --> 00:06:05,000
o container é o Docker,

101
00:06:05,000 --> 00:06:09,000
e aqui mostrando a possibilidade de utilizar diversas linguagens,

102
00:06:09,000 --> 00:06:11,000
tipo Java, Quart, o Google,

103
00:06:11,000 --> 00:06:13,000
e a comunicação com os bancos de dados.

104
00:06:13,000 --> 00:06:16,000
No caso a gente vai utilizando o NoSQL,

105
00:06:16,000 --> 00:06:19,000
ou utilizando uma Firebase.

106
00:06:21,000 --> 00:06:24,000
E as vantagens de se utilizar um microserviço?

107
00:06:24,000 --> 00:06:27,000
Isso. A escalabilidade é eficiente,

108
00:06:27,000 --> 00:06:30,000
se conseguir escalar melhor essa software,

109
00:06:30,000 --> 00:06:33,000
isso tem facilidade na manutenção.

110
00:06:33,000 --> 00:06:36,000
Isso aqui é um ponto meio divergente também.

111
00:06:36,000 --> 00:06:38,000
A tecnologia é diversificada,

112
00:06:38,000 --> 00:06:40,000
essa facilidade na manutenção

113
00:06:40,000 --> 00:06:43,000
é no sentido de você ter códigos menores para analisar.

114
00:06:43,000 --> 00:06:46,000
Ele é resiliente e tolerante à falha,

115
00:06:46,000 --> 00:06:50,000
então se você se preocupar com os acuplamentos,

116
00:06:50,000 --> 00:06:53,000
o microserviço não vai parar o outro,

117
00:06:53,000 --> 00:06:56,000
e no movimento em paralelo você consegue quebrar

118
00:06:56,000 --> 00:06:58,000
o seu microserviço em vários microserviços,

119
00:06:58,000 --> 00:07:02,000
então você tem a possibilidade de granularizar bem o seu software,

120
00:07:02,000 --> 00:07:05,000
e a facilidade de escalabilidade horizontal,

121
00:07:05,000 --> 00:07:08,000
que é isso de granularizar o software.

122
00:07:10,000 --> 00:07:12,000
E os desafios?

123
00:07:12,000 --> 00:07:15,000
A complexidade é devido do tamanho da arquitetura,

124
00:07:15,000 --> 00:07:17,000
testes de refatoração,

125
00:07:17,000 --> 00:07:20,000
esse ponto aqui e você tem input e você tem output,

126
00:07:20,000 --> 00:07:23,000
e você tem pequenas séries de negócios no microserviço,

127
00:07:23,000 --> 00:07:27,000
porém para você encontrar onde pode estar o problema,

128
00:07:27,000 --> 00:07:29,000
é um pouco mais demorado.

129
00:07:29,000 --> 00:07:32,000
O aumento de custo para resolver bugs,

130
00:07:32,000 --> 00:07:34,000
o aumento de custo no sentido do tempo que o desenvolvedor

131
00:07:34,000 --> 00:07:36,000
vai levar para encontrar onde dá o problema,

132
00:07:36,000 --> 00:07:38,000
pode ser maior.

133
00:07:38,000 --> 00:07:42,000
A latência, a comunicação é feita sempre via rede HTTP,

134
00:07:42,000 --> 00:07:45,000
no caso o Google oferece o viciPi,

135
00:07:45,000 --> 00:07:48,000
que é um consensus uma rede local dentro da cloud,

136
00:07:48,000 --> 00:07:52,000
essa rede local você consegue colocar seus fases para se comunicarem,

137
00:07:52,000 --> 00:07:54,000
então isso foi dos bastantes,

138
00:07:54,000 --> 00:07:56,000
e a latência mais ainda assim estamos tratando de HTTP,

139
00:07:56,000 --> 00:07:58,000
aquisições de HTTP,

140
00:07:58,000 --> 00:08:01,000
então por isso uma desvantagem.

141
00:08:01,000 --> 00:08:05,000
O gerenciamento de dados ao longo do prazo,

142
00:08:05,000 --> 00:08:08,000
você vai ter vários bancos e em algum determinado momento

143
00:08:08,000 --> 00:08:10,000
isso pode ser complexo de gerenciar,

144
00:08:10,000 --> 00:08:12,000
e nem todos os aplicativos são grandes,

145
00:08:12,000 --> 00:08:14,000
o suficiente para ser divididos em microserviços,

146
00:08:14,000 --> 00:08:16,000
isso aqui vale muito levar em contas.

147
00:08:16,000 --> 00:08:19,000
Na hora de escolher essa aplicação.

148
00:08:21,000 --> 00:08:24,000
E as boas práticas do microserviço?

149
00:08:24,000 --> 00:08:27,000
Cada serviço é uma arquitetura de microserviço,

150
00:08:27,000 --> 00:08:31,000
possui o seu próprio bug de dados na sua arquitetura,

151
00:08:31,000 --> 00:08:35,000
ou utiliza de preferência a comunicação acíncrona,

152
00:08:35,000 --> 00:08:38,000
a comunicação dos microserviços deve ser realizada

153
00:08:38,000 --> 00:08:40,000
de exposição de APIs,

154
00:08:40,000 --> 00:08:42,000
de APIs REST,

155
00:08:42,000 --> 00:08:45,000
que deve se evitar o acoplamento,

156
00:08:45,000 --> 00:08:47,000
a pay gateway,

157
00:08:47,000 --> 00:08:50,000
ela deve ser a centralização das autenticações,

158
00:08:50,000 --> 00:08:52,000
rotas e balanceamentos de cargas,

159
00:08:52,000 --> 00:08:55,000
logs, as limitações,

160
00:08:55,000 --> 00:08:57,000
tudo deve acontecer dentro dela,

161
00:08:57,000 --> 00:08:59,000
ela é como se um swagger,

162
00:08:59,000 --> 00:09:01,000
o melhor ela é um swagger,

163
00:09:01,000 --> 00:09:04,000
e evitar falhas em cascatas,

164
00:09:04,000 --> 00:09:07,000
você evitando os apoclamentos do microserviço,

165
00:09:07,000 --> 00:09:09,000
você não tendo dependências,

166
00:09:09,000 --> 00:09:11,000
ou mínimas dependências de um microserviço para o outro,

167
00:09:11,000 --> 00:09:13,000
você vai conseguir evitar falhas em cascatas,

168
00:09:13,000 --> 00:09:15,000
então um microserviço não vai parar o outro

169
00:09:15,000 --> 00:09:18,000
por deixar que o curso está falhando em algum momento.

170
00:09:20,000 --> 00:09:24,000
E como que migra um monolito para um microserviço?

171
00:09:24,000 --> 00:09:29,000
Primeiro, você extrai uma funcionalidade do seu monolito,

172
00:09:29,000 --> 00:09:31,000
passe ele para o microserviço,

173
00:09:31,000 --> 00:09:33,000
e você faz os testes,

174
00:09:33,000 --> 00:09:35,000
você evita refaturar tudo de uma vez,

175
00:09:35,000 --> 00:09:40,000
você deve primeiro pensar em desapoplar o serviço do monolito,

176
00:09:43,000 --> 00:09:47,000
as organizações na hora de passagem do monolito para o microserviço

177
00:09:47,000 --> 00:09:49,000
deve sempre pensar nas regras de negócio,

178
00:09:49,000 --> 00:09:51,000
e não necessariamente na tecnologia,

179
00:09:51,000 --> 00:09:52,000
nesse momento,

180
00:09:52,000 --> 00:09:55,000
e ao migrar gradualmente os serviços,

181
00:09:55,000 --> 00:09:59,000
pode-se utilizar um patrón chamado Tierra Database,

182
00:09:59,000 --> 00:10:02,000
que você pega vários microserviços,

183
00:10:02,000 --> 00:10:04,000
que você foi passando,

184
00:10:04,000 --> 00:10:06,000
e reaproveita a base de dados,

185
00:10:06,000 --> 00:10:10,000
e depois você vem desapoplando as bases de dados,

186
00:10:10,000 --> 00:10:15,000
então compartilhar a base de dados entre os microserviços é algo temporário,

187
00:10:17,000 --> 00:10:21,000
e o microserviço exige muita automação,

188
00:10:21,000 --> 00:10:24,000
então deve-se pensar bastante,

189
00:10:24,000 --> 00:10:27,000
não devolve-se nesse momento para fazer os bílgues,

190
00:10:27,000 --> 00:10:30,000
criar as automatizações, as pipeline,

191
00:10:33,000 --> 00:10:34,000
e o que eu faço?

192
00:10:35,000 --> 00:10:39,000
Não dá para trabalhar com cloud microserviços e sem falar de faz,

193
00:10:39,000 --> 00:10:42,000
faz um serviço de back-end, um servidor,

194
00:10:42,000 --> 00:10:45,000
que não é um servidor,

195
00:10:45,000 --> 00:10:47,000
vamos dizer ali, um serviço,

196
00:10:47,000 --> 00:10:49,000
que vai ficar escutando,

197
00:10:49,000 --> 00:10:51,000
e toda vez que chegar uma requisição HTTP,

198
00:10:51,000 --> 00:10:54,000
ele vai expor esse serviço,

199
00:10:54,000 --> 00:10:56,000
disparar um segundo o serviço,

200
00:10:56,000 --> 00:10:59,000
e dar um retorno para a gente, e desligar,

201
00:10:59,000 --> 00:11:03,000
e quais as vantagens de utilizar esse formato,

202
00:11:03,000 --> 00:11:05,000
ou função, como serviço?

203
00:11:05,000 --> 00:11:08,000
Você tem melhoria na idosa de desenvolvimento,

204
00:11:08,000 --> 00:11:13,000
porque você não precisa se preocupar com a infraestrutura,

205
00:11:13,000 --> 00:11:16,000
ela é toda gerenciada pelo produtor de cloud,

206
00:11:16,000 --> 00:11:19,000
mas pela habilidade embutida,

207
00:11:19,000 --> 00:11:23,000
então você também não precisa se preocupar com o tráfico,

208
00:11:23,000 --> 00:11:28,000
com a indigência, isso também vai ser gerenciado pela cloud,

209
00:11:28,000 --> 00:11:31,000
e a eficiência de custo, porque você não paga um servidor,

210
00:11:31,000 --> 00:11:33,000
você não tem um servidor lá todo o tempo ligado,

211
00:11:33,000 --> 00:11:35,000
uma máquina virtual,

212
00:11:35,000 --> 00:11:39,000
você só vai pagar quando a requisição foi disparada,

213
00:11:39,000 --> 00:11:41,000
levantou a sua função,

214
00:11:41,000 --> 00:11:43,000
ela executou seu microserviço,

215
00:11:43,000 --> 00:11:45,000
te deu um retorno e desligou,

216
00:11:45,000 --> 00:11:48,000
a partir desse momento já não é cobrado mais custo,

217
00:11:48,000 --> 00:11:51,000
é um taxímetro ali.

218
00:11:54,000 --> 00:11:56,000
E quais os desafios do FAS?

219
00:11:56,000 --> 00:11:58,000
Você tem menor controle do sistema,

220
00:11:58,000 --> 00:12:01,000
porque você não tem acesso direto à infraestrutura,

221
00:12:01,000 --> 00:12:06,000
então na hora de entender você pode ter uma certa complexidade,

222
00:12:06,000 --> 00:12:09,000
e é mais complexo para a testa,

223
00:12:09,000 --> 00:12:12,000
porque na hora de testar você vai ter que utilizar o ambiente local

224
00:12:12,000 --> 00:12:15,000
e você vai ter que tentar reproduzir o mais real possível

225
00:12:15,000 --> 00:12:20,000
o ambiente da cloud na sua máquina de testes,

226
00:12:20,000 --> 00:12:24,000
e o service, o conceito dele.

227
00:12:24,000 --> 00:12:28,000
O conceito do service é exatamente isso da área da FAS,

228
00:12:28,000 --> 00:12:30,000
o service são implementados em contêneres

229
00:12:30,000 --> 00:12:32,000
que são iniciados sobre demanda,

230
00:12:32,000 --> 00:12:35,000
então a FAS é um service,

231
00:12:35,000 --> 00:12:39,000
o service seria mais um conceito e o FAS seria algo mais palpável.

232
00:12:41,000 --> 00:12:45,000
E aqui uma representação das arquiteturas,

233
00:12:45,000 --> 00:12:48,000
aqui eu trouxe o FAS e o service só para comparar

234
00:12:48,000 --> 00:12:51,000
que aqui é um cloud se pagando funções,

235
00:12:51,000 --> 00:12:56,000
que é a mesma representação do service que é uma cloud se pagando funções.

236
00:12:56,000 --> 00:12:59,000
Aqui é o que vamos construir, que eu já expliquei,

237
00:12:59,000 --> 00:13:03,000
e aqui é como funciona o GCP para a gente trabalhar com as FAS.

238
00:13:03,000 --> 00:13:05,000
A gente vai ter o cloud build,

239
00:13:05,000 --> 00:13:09,000
que vai gerar o artifact que vai ser o nosso orquestrador de contêneres,

240
00:13:09,000 --> 00:13:11,000
que vai guardar nossos dolares,

241
00:13:11,000 --> 00:13:14,000
e a cloud run é o nosso FAS,

242
00:13:14,000 --> 00:13:18,000
é o que vai ser disparado, que vai chamar os microservices.

243
00:13:21,000 --> 00:13:23,000
E o que é o GCP?

244
00:13:23,000 --> 00:13:24,000
O que é o Google Cloud?

245
00:13:24,000 --> 00:13:27,000
O cloud nada mais é do que recursos físicos e virtuais

246
00:13:27,000 --> 00:13:30,000
espalhados por todos os cantos do mundo,

247
00:13:30,000 --> 00:13:33,000
e o Google Cloud Platform, que é o GCP,

248
00:13:33,000 --> 00:13:36,000
ele é um provedor de recursos de computação em Google,

249
00:13:36,000 --> 00:13:38,000
então ele é uma suíte de várias soluções,

250
00:13:38,000 --> 00:13:42,000
a gente não vai conseguir ver nenhum por cento do que ele fornece,

251
00:13:42,000 --> 00:13:46,000
acredito que para ver isso somente em uma certificação,

252
00:13:48,000 --> 00:13:52,000
mas vamos utilizar aqui para trabalhar com o FAS.

253
00:13:52,000 --> 00:13:55,000
E aqui são os comandos básicos que a gente vai utilizar,

254
00:13:55,000 --> 00:13:57,000
que eu deixei aqui.

255
00:13:58,000 --> 00:14:01,000
E aqui as bibliotecas que a gente vai utilizar nele,

256
00:14:01,000 --> 00:14:02,000
que é o App Engine,

257
00:14:02,000 --> 00:14:05,000
que ele é responsável pela criação dos aplicativos.

258
00:14:05,000 --> 00:14:08,000
O cloud build, que é o construtor do aplicativo,

259
00:14:08,000 --> 00:14:13,000
o artifact, que é o nosso orquestrador,

260
00:14:14,000 --> 00:14:17,000
o cloud run, que é a nossa FAS,

261
00:14:17,000 --> 00:14:20,000
ele é o que vai disparar o serviço,

262
00:14:20,000 --> 00:14:25,000
e o IAM é o que controla as permissões.

263
00:14:27,000 --> 00:14:30,000
E aí só para a gente fechar aqui a parte teórica,

264
00:14:30,000 --> 00:14:32,000
sobre o que é o Docker,

265
00:14:32,000 --> 00:14:35,000
o Docker são containers virtuais

266
00:14:35,000 --> 00:14:38,000
que você consegue rodar imagens do sistema professional,

267
00:14:38,000 --> 00:14:40,000
pode rodar Windows,

268
00:14:40,000 --> 00:14:42,000
pode rodar Windows, pode rodar Mac.

269
00:14:42,000 --> 00:14:44,000
Eu estou utilizando o Linux, porque não faz sentido

270
00:14:44,000 --> 00:14:48,000
num teste você pagar uma licença Windows,

271
00:14:48,000 --> 00:14:50,000
mas eu não vou entrar nesse método do sistema professional,

272
00:14:50,000 --> 00:14:52,000
da compilação, para compilar o delft para Linux,

273
00:14:52,000 --> 00:14:54,000
você pode utilizar o Pa server,

274
00:14:54,000 --> 00:14:56,000
tem bastante vídeo no internet sobre ele.

275
00:14:57,000 --> 00:15:00,000
E aqui tem os comandos básicos do Docker,

276
00:15:00,000 --> 00:15:01,000
porque a gente vai utilizar,

277
00:15:01,000 --> 00:15:05,000
eu deixei esse, e esse sudo Docker build aqui,

278
00:15:06,000 --> 00:15:09,000
felizado, porque a gente vai utilizar ele dentro da cloud,

279
00:15:09,000 --> 00:15:11,000
não vai dar tempo de mostrar ele,

280
00:15:11,000 --> 00:15:15,000
rodando no nosso ambiente local.

281
00:15:16,000 --> 00:15:20,000
Então, como diz o Linux,

282
00:15:20,000 --> 00:15:22,000
tal que este show me decode,

283
00:15:22,000 --> 00:15:24,000
vamos para a parte prática.

284
00:15:26,000 --> 00:15:28,000
Então, aqui no delft,

285
00:15:29,000 --> 00:15:31,000
o delft não tem nada demais nele,

286
00:15:31,000 --> 00:15:33,000
aqui é a minha pay gate,

287
00:15:33,000 --> 00:15:35,000
vamos construir,

288
00:15:35,000 --> 00:15:36,000
só voltar aqui,

289
00:15:36,000 --> 00:15:38,000
aqui é a minha pay gate.

290
00:15:38,000 --> 00:15:41,000
Então, aqui é apenas um Morse,

291
00:15:41,000 --> 00:15:44,000
estou dando na porta 8080,

292
00:15:44,000 --> 00:15:47,000
com os cores ativos,

293
00:15:47,000 --> 00:15:49,000
onde temos as nossas fotos.

294
00:15:56,000 --> 00:15:58,000
E aqui nas fotos,

295
00:15:58,000 --> 00:16:01,000
eu estou indicando os verbos HTTPs que eu vou estar utilizando,

296
00:16:01,000 --> 00:16:04,000
que é o get, post, boot, delet,

297
00:16:04,000 --> 00:16:06,000
e o path,

298
00:16:06,000 --> 00:16:08,000
e para cada,

299
00:16:08,000 --> 00:16:10,000
para cada verba HTTP,

300
00:16:10,000 --> 00:16:12,000
eles são rest,

301
00:16:12,000 --> 00:16:14,000
para dentro do meu microservice.

302
00:16:14,000 --> 00:16:16,000
No caso aqui,

303
00:16:16,000 --> 00:16:18,000
eu tenho um endereço que o cloud me fornece,

304
00:16:18,000 --> 00:16:20,000
mas é minha ORI.

305
00:16:20,000 --> 00:16:22,000
E este aqui é a minha pay gate,

306
00:16:22,000 --> 00:16:25,000
então ela vai cuidar da volta do meu microservice,

307
00:16:26,000 --> 00:16:29,000
e aqui é o meu microservice de delivery,

308
00:16:29,000 --> 00:16:30,000
que é o exemplo que eu criei.

309
00:16:30,000 --> 00:16:31,000
Também é um Morse,

310
00:16:31,000 --> 00:16:33,000
estou dando na porta 8080,

311
00:16:33,000 --> 00:16:34,000
o mesmo critério,

312
00:16:34,000 --> 00:16:35,000
tem as minhas ORIs,

313
00:16:35,000 --> 00:16:38,000
que são os meus verbos HTTPs,

314
00:16:38,000 --> 00:16:40,000
e dispara uma requisição aqui,

315
00:16:40,000 --> 00:16:41,000
no caso aqui,

316
00:16:41,000 --> 00:16:44,000
ele está disparando para o meu Firebase,

317
00:16:44,000 --> 00:16:46,000
que é o meu banco de dados aqui.

318
00:16:48,000 --> 00:16:50,000
Certo,

319
00:16:50,000 --> 00:16:52,000
então vamos para,

320
00:16:52,000 --> 00:16:54,000
vamos para a nuvem.

321
00:16:54,000 --> 00:16:58,000
Aqui não consegui ativar todos os serviços aqui,

322
00:16:58,000 --> 00:16:59,000
porque leva um bom tempo,

323
00:16:59,000 --> 00:17:01,000
só para criar o cloud build,

324
00:17:01,000 --> 00:17:03,000
ali em uns 10 minutos.

325
00:17:03,000 --> 00:17:05,000
Então aqui dentro da cloud,

326
00:17:05,000 --> 00:17:07,000
é só dar um novo projeto,

327
00:17:07,000 --> 00:17:09,000
porque eu já tenho um criado aqui,

328
00:17:09,000 --> 00:17:11,000
eu estou utilizando o meu projeto,

329
00:17:11,000 --> 00:17:12,000
não tem nada de mais,

330
00:17:12,000 --> 00:17:14,000
é só ir seguindo o que vai pedir,

331
00:17:14,000 --> 00:17:16,000
praticamente um next-next finish ali.

332
00:17:16,000 --> 00:17:21,000
E para você ativar as bibliotecas que eu citei aqui,

333
00:17:21,000 --> 00:17:23,000
que está aqui,

334
00:17:23,000 --> 00:17:25,000
é só escrever o nome delas,

335
00:17:25,000 --> 00:17:27,000
o App Engine,

336
00:17:31,000 --> 00:17:33,000
é só escrever aqui o App Engine,

337
00:17:33,000 --> 00:17:35,000
e ele vai aparecer por aqui.

338
00:17:37,000 --> 00:17:39,000
Aqui o App Engine,

339
00:17:39,000 --> 00:17:40,000
no caso do App Engine,

340
00:17:40,000 --> 00:17:41,000
na hora de criar,

341
00:17:41,000 --> 00:17:43,000
ele é a única atenção dele que você tem que colocar na linguagem

342
00:17:43,000 --> 00:17:44,000
que ele fosse estar,

343
00:17:44,000 --> 00:17:45,000
vai estar lá para,

344
00:17:45,000 --> 00:17:47,000
então, JavaScript,

345
00:17:47,000 --> 00:17:49,000
PHP, você coloca em outros,

346
00:17:49,000 --> 00:17:51,000
e o ambiente dele vai ser flexível.

347
00:17:51,000 --> 00:17:52,000
O outros,

348
00:17:52,000 --> 00:17:55,000
quer dizer que a gente vai utilizar binários,

349
00:17:55,000 --> 00:18:00,000
e o flexível quer dizer que a gente vai utilizar os containers.

350
00:18:00,000 --> 00:18:03,000
Então é só clicar nele e fazer a criação dele,

351
00:18:03,000 --> 00:18:05,000
o mesmo a gente vai utilizar para o cloud build,

352
00:18:05,000 --> 00:18:08,000
é só escrever o cloud build aqui,

353
00:18:08,000 --> 00:18:10,000
porque ele vai sugerir para você,

354
00:18:10,000 --> 00:18:11,000
você vai só ativar também,

355
00:18:11,000 --> 00:18:13,000
vai só dar um Enable nele,

356
00:18:13,000 --> 00:18:16,000
e é só seguir esses mesmos passos para todos aqui.

357
00:18:16,000 --> 00:18:19,000
Não precisa criar um tipo de configuração nele,

358
00:18:19,000 --> 00:18:20,000
só o App Engine que você vai ter que apontar

359
00:18:20,000 --> 00:18:23,000
aquela linguagem flexível,

360
00:18:23,000 --> 00:18:26,000
e após ter ativado todos,

361
00:18:26,000 --> 00:18:29,000
a gente vai vir aqui,

362
00:18:29,000 --> 00:18:33,000
e vai entrar no Google Shell,

363
00:18:33,000 --> 00:18:37,000
e vai levar um tempinho que só vai iniciar a máquina,

364
00:18:37,000 --> 00:18:39,000
e eu vou abrir em uma lateral aqui,

365
00:18:39,000 --> 00:18:44,000
para a gente ter uma aba dedicada para o console.

366
00:18:54,000 --> 00:18:56,000
Aqui dentro do console,

367
00:18:56,000 --> 00:19:00,000
eu vou indicar o meu projeto,

368
00:19:00,000 --> 00:19:03,000
que é esse projeto de livro que eu criei aqui,

369
00:19:03,000 --> 00:19:06,000
esse que está apontado aqui,

370
00:19:06,000 --> 00:19:08,000
e aí aqui dentro,

371
00:19:08,000 --> 00:19:09,000
a gente vai clicar nesse lá,

372
00:19:09,000 --> 00:19:11,000
precisinho aqui para abrir o editor,

373
00:19:11,000 --> 00:19:14,000
por padrão, toda vez que a gente cria um projeto,

374
00:19:14,000 --> 00:19:16,000
o Google ele já cria uma pasta para a gente,

375
00:19:16,000 --> 00:19:21,000
então é só vir aqui no open folder,

376
00:19:21,000 --> 00:19:24,000
e aqui eu criei uma pasta chamada de livro,

377
00:19:24,000 --> 00:19:27,000
e eu vou abrir ela.

378
00:19:31,000 --> 00:19:33,000
Aqui, no meu arquivo locais,

379
00:19:33,000 --> 00:19:36,000
eu tenho os dois compilados do Delfin,

380
00:19:36,000 --> 00:19:40,000
que é a mpd8 e meu microservice,

381
00:19:40,000 --> 00:19:42,000
e que são os binários do Linux,

382
00:19:42,000 --> 00:19:44,000
que eu estou utilizando no WSL,

383
00:19:44,000 --> 00:19:45,000
estou utilizando o Linux aqui,

384
00:19:45,000 --> 00:19:48,000
que é o Google que estou rodando,

385
00:19:48,000 --> 00:19:50,000
eu vou precisar do meu app,

386
00:19:50,000 --> 00:19:52,000
e o meu cloud build em,

387
00:19:52,000 --> 00:19:54,000
e o docker file,

388
00:19:54,000 --> 00:19:56,000
então o que a gente vai fazer com esses arquivos,

389
00:19:56,000 --> 00:20:00,000
a gente vai passar aqui para dentro do cloud,

390
00:20:00,000 --> 00:20:04,000
no caso eu criei aqui uma pasta chamada apg8,

391
00:20:04,000 --> 00:20:07,000
e uma pasta do delivery do microservice,

392
00:20:07,000 --> 00:20:10,000
e no caso aqui é só rastar para o navegador,

393
00:20:10,000 --> 00:20:12,000
eu já economizei um tempo aqui de subir o upload,

394
00:20:12,000 --> 00:20:14,000
deixa eu deixar ele aqui,

395
00:20:14,000 --> 00:20:17,000
e como que funcionam essas estruturas,

396
00:20:17,000 --> 00:20:19,000
esse app M aqui,

397
00:20:19,000 --> 00:20:23,000
é o que indica para o nosso app engine,

398
00:20:23,000 --> 00:20:27,000
que ele está funcionando em um ambiente flexível,

399
00:20:27,000 --> 00:20:29,000
aqui de containers,

400
00:20:29,000 --> 00:20:32,000
e o runtime dele é um custom,

401
00:20:32,000 --> 00:20:34,000
porque vai ser um binário,

402
00:20:34,000 --> 00:20:36,000
no caso se fosse Python, ele teria Python,

403
00:20:36,000 --> 00:20:38,000
ele é a versão do comprador do Python,

404
00:20:38,000 --> 00:20:41,000
aqui o nosso cloud build,

405
00:20:41,000 --> 00:20:45,000
aqui eu estou apontando para o serviço do docker,

406
00:20:45,000 --> 00:20:47,000
dentro da cloud,

407
00:20:47,000 --> 00:20:49,000
e lembra que eu deixei aqui,

408
00:20:49,000 --> 00:20:51,000
marcado no docker,

409
00:20:51,000 --> 00:20:53,000
esse comando eu subo,

410
00:20:53,000 --> 00:20:55,000
e o docker build-d,

411
00:20:55,000 --> 00:20:58,000
isso aqui é o comando que a gente utiliza para criar o docker,

412
00:20:58,000 --> 00:21:01,000
então no caso eu estou apontando para o Google,

413
00:21:01,000 --> 00:21:02,000
que nos argumentos dele,

414
00:21:02,000 --> 00:21:04,000
o que eu quero que o docker faça,

415
00:21:04,000 --> 00:21:06,000
que é o build-d,

416
00:21:06,000 --> 00:21:08,000
dentro do meu repositório,

417
00:21:08,000 --> 00:21:11,000
e a imagem que eu quero que ele crie,

418
00:21:11,000 --> 00:21:14,000
e aqui eu estou só apontando qualquer imagem,

419
00:21:15,000 --> 00:21:17,000
e para ele criar essa imagem para mim,

420
00:21:17,000 --> 00:21:19,000
ele precisa desse arquivo aqui,

421
00:21:19,000 --> 00:21:21,000
o docker file,

422
00:21:21,000 --> 00:21:23,000
dentro do docker file,

423
00:21:23,000 --> 00:21:24,000
para você utilizar o docker,

424
00:21:24,000 --> 00:21:27,000
você vai ter que ter uma conta aqui no docker hub,

425
00:21:27,000 --> 00:21:29,000
e aqui no docker hub,

426
00:21:29,000 --> 00:21:32,000
eu estou utilizando essa imagem do Ubuntu,

427
00:21:32,000 --> 00:21:37,000
e aqui dentro do Ubuntu estou utilizando a versão 2204 dele,

428
00:21:37,000 --> 00:21:40,000
então eu estou dizendo tudo isso na minha cloud,

429
00:21:40,000 --> 00:21:43,000
que eu quero pegar o Ubuntu 22.4,

430
00:21:43,000 --> 00:21:46,000
que ele vai ser apontado para essa imagem,

431
00:21:46,000 --> 00:21:50,000
e aqui os runs são os passos que vão ser criados,

432
00:21:50,000 --> 00:21:53,000
então eu estou dizendo que para ele criar,

433
00:21:53,000 --> 00:21:55,000
depois que ele baixar a imagem,

434
00:21:55,000 --> 00:21:58,000
ele vai dar uma apt-get update para atualizar o sistema operacional,

435
00:21:58,000 --> 00:22:00,000
e vai instalar essas links,

436
00:22:00,000 --> 00:22:02,000
como eu estou trabalhando com o horse,

437
00:22:02,000 --> 00:22:03,000
eu estou trabalhando com o HTTP,

438
00:22:03,000 --> 00:22:06,000
e eu preciso do ssr e do kernel aqui,

439
00:22:06,000 --> 00:22:09,000
então essas duas bibliotecas que são bem importantes,

440
00:22:09,000 --> 00:22:13,000
e essas são meio que padrões do docker.

441
00:22:13,000 --> 00:22:16,000
Estou pedindo para ele criar uma pasta chamada web,

442
00:22:16,000 --> 00:22:17,000
dar uma mkdir aqui,

443
00:22:17,000 --> 00:22:20,000
para quem fez os cursinhos de semideira,

444
00:22:20,000 --> 00:22:22,000
é o mesmo comando,

445
00:22:22,000 --> 00:22:25,000
estou pedindo para ele copiar aqui a minha pg8,

446
00:22:25,000 --> 00:22:28,000
que é o meu binário para dentro da pasta f,

447
00:22:28,000 --> 00:22:30,000
então eu estou pegando de fora,

448
00:22:30,000 --> 00:22:32,000
e passando para dentro do container que ele vai criar.

449
00:22:32,000 --> 00:22:36,000
Aqui eu estou chmodi para dar a permissão do Linux,

450
00:22:36,000 --> 00:22:38,000
então estou dando a renúncia hmodi aqui

451
00:22:38,000 --> 00:22:41,000
para eu ter permissão no meu binário,

452
00:22:41,000 --> 00:22:44,000
dizendo que eu vou expor o meu container na porta 8080,

453
00:22:44,000 --> 00:22:47,000
que é a porta que o horse está escutando,

454
00:22:47,000 --> 00:22:49,000
e aqui eu estou dizendo que a minha workdir,

455
00:22:49,000 --> 00:22:52,000
que é para eu posicionar na minha porta,

456
00:22:52,000 --> 00:22:56,000
na minha pasta app,

457
00:22:56,000 --> 00:22:58,000
então quando for levantado a container,

458
00:22:58,000 --> 00:23:00,000
eu vou estar na porta app,

459
00:23:00,000 --> 00:23:04,000
e eu vou dar um cmd.bpg8,

460
00:23:04,000 --> 00:23:09,000
esse cmd.bpg8 é para instartar o binário dentro do Linux,

461
00:23:09,000 --> 00:23:12,000
e o mesmo aqui é a mesma configuração que prometa o serviço,

462
00:23:12,000 --> 00:23:14,000
no caso do acerfile dele,

463
00:23:14,000 --> 00:23:17,000
a única diferença é que ele está passando o binário

464
00:23:17,000 --> 00:23:22,000
do micro serviço para dentro do container.

465
00:23:22,000 --> 00:23:24,000
E aqui no shell,

466
00:23:24,000 --> 00:23:27,000
a gente tem que só que entrar na raiz

467
00:23:27,000 --> 00:23:29,000
onde está o cloudbuild,

468
00:23:29,000 --> 00:23:31,000
e a gente vai instartar ele,

469
00:23:31,000 --> 00:23:36,000
vamos dar um cmd.bpg8,

470
00:23:36,000 --> 00:23:38,000
e vamos entrar aqui na nossa pg8,

471
00:23:38,000 --> 00:23:45,000
então cmd.bpg8,

472
00:23:45,000 --> 00:23:50,000
ele aqui de sensitive.

473
00:23:50,000 --> 00:23:52,000
E esse para ver o diretório,

474
00:23:52,000 --> 00:23:55,000
certo, estou aqui, tenho o binário,

475
00:23:55,000 --> 00:23:57,000
e as umas arquivas de configuração,

476
00:23:57,000 --> 00:24:00,000
o cloudbuild, o app está apontando o app engine,

477
00:24:00,000 --> 00:24:02,000
o cloudbuild vai chamar o Dockerfile,

478
00:24:02,000 --> 00:24:05,000
e vai fazer a construção.

479
00:24:05,000 --> 00:24:07,000
Para criar um repositório,

480
00:24:07,000 --> 00:24:09,000
no meu caso aqui,

481
00:24:09,000 --> 00:24:14,000
eu vou entrar no artifacts aqui,

482
00:24:14,000 --> 00:24:16,000
que é o nosso orquestrador,

483
00:24:16,000 --> 00:24:19,000
eu já criei a minha paixinha com o repositório,

484
00:24:19,000 --> 00:24:22,000
que é o meu Dockerhackle aqui.

485
00:24:22,000 --> 00:24:25,000
E para fazer essa criação,

486
00:24:25,000 --> 00:24:28,000
ele vai estar aqui dentro.

487
00:24:28,000 --> 00:24:30,000
É esse comando aqui para criar o repositório,

488
00:24:30,000 --> 00:24:34,000
que é o de cloud, artifacts, repositories,

489
00:24:34,000 --> 00:24:37,000
create.hackle,

490
00:24:37,000 --> 00:24:40,000
e é só rodar esse comando aqui dentro da cloud,

491
00:24:40,000 --> 00:24:42,000
não é uma coisa que ele vai na falha,

492
00:24:42,000 --> 00:24:45,000
porque ele vai dizer que eu já tenho esse repositório.

493
00:24:45,000 --> 00:24:47,000
Quando roda o primeiro comando dentro de uma pasta,

494
00:24:47,000 --> 00:24:49,000
ele perde uma autorização,

495
00:24:49,000 --> 00:24:51,000
é só clicar em autorizar,

496
00:24:51,000 --> 00:24:54,000
ele vai rodar com a conta aqui do Google,

497
00:24:54,000 --> 00:24:57,000
e aqui está o Dockerhackle,

498
00:24:57,000 --> 00:25:00,000
que é o que eu já criei,

499
00:25:00,000 --> 00:25:03,000
e ele guarda o meu container.

500
00:25:03,000 --> 00:25:07,000
Caso eu vou ter dois containers aqui dentro.

501
00:25:07,000 --> 00:25:10,000
Caso ele só der um erro dizendo que já existe,

502
00:25:10,000 --> 00:25:12,000
que existe.

503
00:25:12,000 --> 00:25:14,000
E para criar esse container,

504
00:25:14,000 --> 00:25:15,000
como funciona,

505
00:25:15,000 --> 00:25:18,000
é esse comando aqui de cloudbuildsubmit,

506
00:25:18,000 --> 00:25:21,000
eu vou chamando o configurador,

507
00:25:21,000 --> 00:25:24,000
e vou apontar para o meu cloudbuild,

508
00:25:24,000 --> 00:25:26,000
que é o cloudbuild dessa pasta aqui.

509
00:25:26,000 --> 00:25:28,000
Então ele vai executar só esses arquivos aqui.

510
00:25:28,000 --> 00:25:30,000
Aí depois se repete o mesmo processo

511
00:25:30,000 --> 00:25:32,000
para o meu outro microservice.

512
00:25:32,000 --> 00:25:35,000
Então, ao rodar ele aqui,

513
00:25:35,000 --> 00:25:38,000
ele vai começar a fazer a criação.

514
00:25:42,000 --> 00:25:44,000
O container cria aqui, o que ele vai fazer?

515
00:25:44,000 --> 00:25:45,000
Ele vai criar uma imagem,

516
00:25:45,000 --> 00:25:48,000
e nessa imagem você consegue

517
00:25:48,000 --> 00:25:50,000
controlar suas versões.

518
00:25:50,000 --> 00:25:53,000
Aqui eu tenho as versões anteriores,

519
00:25:53,000 --> 00:25:55,000
e aqui eu tenho a última que eu testei,

520
00:25:55,000 --> 00:25:56,000
que foi a 22 horas atrás.

521
00:25:56,000 --> 00:25:58,000
No suporto eu estou subindo uma versão,

522
00:25:58,000 --> 00:26:00,000
e ela está com bug,

523
00:26:00,000 --> 00:26:01,000
e eu preciso voltar.

524
00:26:01,000 --> 00:26:04,000
É só eu vim apontar para o container anterior,

525
00:26:04,000 --> 00:26:06,000
que está com a versão anterior do meu binário.

526
00:26:06,000 --> 00:26:08,000
E você não precisa parar

527
00:26:08,000 --> 00:26:10,000
em nenhum momento o seu cliente.

528
00:26:10,000 --> 00:26:12,000
Então se você tem, sei lá,

529
00:26:12,000 --> 00:26:14,000
10 mil clientes pendurados,

530
00:26:14,000 --> 00:26:15,000
ele não subir para o serviço,

531
00:26:15,000 --> 00:26:16,000
ele está bugado,

532
00:26:16,000 --> 00:26:17,000
e você tem 1 ou 2 mil clientes.

533
00:26:17,000 --> 00:26:19,000
Você atualiza,

534
00:26:19,000 --> 00:26:23,000
e aí ele espera todas as requisições anteriores terminar,

535
00:26:23,000 --> 00:26:25,000
e ele passa para a nova.

536
00:26:25,000 --> 00:26:28,000
Enquanto está aqui, ele...

537
00:26:33,000 --> 00:26:34,000
A hora que se pode dar,

538
00:26:34,000 --> 00:26:36,000
ele sempre vai dar um erro, não é?

539
00:26:47,000 --> 00:26:49,000
Eu acho que...

540
00:26:49,000 --> 00:26:51,000
eu zoei o meu...

541
00:26:51,000 --> 00:26:53,000
meu apetite.

542
00:27:05,000 --> 00:27:07,000
A gente só vê o que aconteceu aqui.

543
00:27:07,000 --> 00:27:17,000
A gente está procurando o meu...

544
00:27:25,000 --> 00:27:28,000
E após criar aqui o container,

545
00:27:28,000 --> 00:27:31,000
a gente vai vincular o container com a nossa cloud,

546
00:27:31,000 --> 00:27:34,000
então vai executando e eu vou correndo aqui.

547
00:27:37,000 --> 00:27:40,000
Aqui dentro, para criar uma cloud LAN,

548
00:27:40,000 --> 00:27:41,000
que é a nossa faz,

549
00:27:41,000 --> 00:27:43,000
é só dar um criar serviço aqui.

550
00:27:43,000 --> 00:27:45,000
Como eu já tenho ele,

551
00:27:45,000 --> 00:27:46,000
então eu não vou criar dos animais,

552
00:27:46,000 --> 00:27:48,000
eu vou mostrar aqui como funciona.

553
00:27:48,000 --> 00:27:50,000
É só selecionar o container

554
00:27:50,000 --> 00:27:51,000
que você acabou de criar,

555
00:27:51,000 --> 00:27:53,000
no caso da versão dele,

556
00:27:53,000 --> 00:27:55,000
ele vai ir para o propiastrador,

557
00:27:55,000 --> 00:27:56,000
vai expandindo,

558
00:27:56,000 --> 00:27:58,000
vai pegar o container,

559
00:27:58,000 --> 00:28:00,000
e aqui é a última que eu tenho aqui,

560
00:28:00,000 --> 00:28:02,000
quando você está buildando a outra ali,

561
00:28:02,000 --> 00:28:04,000
e você seleciona ela.

562
00:28:04,000 --> 00:28:06,000
Então você apontou aqui sua cloud,

563
00:28:06,000 --> 00:28:08,000
a sua cloud LAN toda vez que ela for chamada,

564
00:28:08,000 --> 00:28:10,000
vai disparar esse container.

565
00:28:10,000 --> 00:28:12,000
E a...

566
00:28:12,000 --> 00:28:14,000
e o que você está dizendo,

567
00:28:14,000 --> 00:28:16,000
que já tem nos distâncias

568
00:28:16,000 --> 00:28:18,000
e o tipo de autenticação,

569
00:28:18,000 --> 00:28:20,000
no caso eu estou utilizando autenticação

570
00:28:20,000 --> 00:28:22,000
direto na pgtwin.

571
00:28:22,000 --> 00:28:24,000
Então eu só abrir a minha pgtwin,

572
00:28:24,000 --> 00:28:26,000
que eu já tenho criado aqui.

573
00:28:27,000 --> 00:28:29,000
Agora ele está rodando certinho aqui.

574
00:28:29,000 --> 00:28:31,000
Ele já começou a dar os steps aqui,

575
00:28:31,000 --> 00:28:34,000
que são os runs que eu apontei

576
00:28:34,000 --> 00:28:36,000
aqui no Dockerfine.

577
00:28:39,000 --> 00:28:41,000
E aqui dentro,

578
00:28:41,000 --> 00:28:43,000
o que acontece quando a gente implementa?

579
00:28:43,000 --> 00:28:45,000
Ele ganha uma URL aqui.

580
00:28:45,000 --> 00:28:47,000
Então eu vou trabalhar

581
00:28:47,000 --> 00:28:49,000
com essa URL toda vez que eu chamar

582
00:28:49,000 --> 00:28:51,000
essa URL barra,

583
00:28:51,000 --> 00:28:53,000
o que está dentro do meu Docker,

584
00:28:53,000 --> 00:28:55,000
que eu defini aqui no Delphi,

585
00:28:55,000 --> 00:28:57,000
no caso da minha pgtwin.

586
00:28:57,000 --> 00:28:59,000
No caso da minha pgtwin,

587
00:28:59,000 --> 00:29:01,000
ela está escutando na URL

588
00:29:01,000 --> 00:29:03,000
de DelphiMS pedidos.

589
00:29:03,000 --> 00:29:05,000
Então toda vez que eu chamar essa URL

590
00:29:05,000 --> 00:29:07,000
aqui,

591
00:29:07,000 --> 00:29:09,000
ele vai disparar no caso aqui um...

592
00:29:09,000 --> 00:29:11,000
ele vai disparar

593
00:29:11,000 --> 00:29:13,000
aqui um dos verbos HTTP,

594
00:29:13,000 --> 00:29:15,000
que está rodando

595
00:29:15,000 --> 00:29:17,000
no microservice do container.

596
00:29:19,000 --> 00:29:20,000
E...

597
00:29:20,000 --> 00:29:22,000
deixa eu ver se ele já rodou,

598
00:29:22,000 --> 00:29:24,000
já rodou agora os statususas.

599
00:29:24,000 --> 00:29:25,000
Então aqui,

600
00:29:25,000 --> 00:29:27,000
eu vou dar someditar a implementação.

601
00:29:27,000 --> 00:29:29,000
No caso não tem como configurar,

602
00:29:29,000 --> 00:29:31,000
a implementação continua.

603
00:29:31,000 --> 00:29:33,000
Aqui você aponta para um repositório do Git

604
00:29:33,000 --> 00:29:35,000
e toda vez que você dá um PR nele,

605
00:29:35,000 --> 00:29:37,000
ele já atualiza para você.

606
00:29:37,000 --> 00:29:39,000
É como uma fina de...

607
00:29:39,000 --> 00:29:41,000
de conhecimento,

608
00:29:41,000 --> 00:29:43,000
para a gente ver como funciona.

609
00:29:43,000 --> 00:29:45,000
Estou fazendo aqui na mão.

610
00:29:45,000 --> 00:29:47,000
Tô dizendo que a porta do meu container

611
00:29:47,000 --> 00:29:49,000
que já é 8080,

612
00:29:49,000 --> 00:29:51,000
então a Cláudia Ubuntu

613
00:29:51,000 --> 00:29:53,000
tem que estar escutando aqui.

614
00:29:53,000 --> 00:29:55,000
E aqui,

615
00:29:55,000 --> 00:29:57,000
legal,

616
00:29:57,000 --> 00:29:58,000
eu vou deixar.

617
00:29:58,000 --> 00:29:59,000
E esse aqui é o front,

618
00:29:59,000 --> 00:30:01,000
que é reconfigurado em Android.

619
00:30:01,000 --> 00:30:03,000
Esse front só para...

620
00:30:03,000 --> 00:30:05,000
antes de eu atualizar aqui,

621
00:30:05,000 --> 00:30:07,000
eu tenho essa classe aqui onde estão os meus verbos.

622
00:30:09,000 --> 00:30:11,000
E ele erda dessa classe aqui

623
00:30:11,000 --> 00:30:13,000
que só está aguardando a URL.

624
00:30:13,000 --> 00:30:15,000
A URL com a URL.

625
00:30:15,000 --> 00:30:17,000
Então,

626
00:30:17,000 --> 00:30:19,000
ele vai chamar a minha perigueita

627
00:30:19,000 --> 00:30:21,000
e vai chamar

628
00:30:21,000 --> 00:30:23,000
o microserviço de delivery.

629
00:30:23,000 --> 00:30:25,000
E o microserviço de delivery vai comunicar

630
00:30:25,000 --> 00:30:27,000
o microserviço.

631
00:30:27,000 --> 00:30:29,000
Toda vez que eu abro essa página aqui,

632
00:30:29,000 --> 00:30:31,000
ela dá um get.

633
00:30:31,000 --> 00:30:33,000
Então, eu só vou separar aqui

634
00:30:33,000 --> 00:30:35,000
e vou deixar esse cara aqui.

635
00:30:39,000 --> 00:30:41,000
Vou melhorar aqui a disposição.

636
00:30:41,000 --> 00:30:43,000
Então, eu selecionei aqui a nova versão

637
00:30:43,000 --> 00:30:45,000
do...

638
00:30:45,000 --> 00:30:47,000
do container.

639
00:30:49,000 --> 00:30:51,000
Aqui está,

640
00:30:51,000 --> 00:30:53,000
que agora já é 2 minutos atrás.

641
00:30:53,000 --> 00:30:55,000
E vou dar um implementar.

642
00:30:57,000 --> 00:30:59,000
Olha que bacana, ele está implementando.

643
00:30:59,000 --> 00:31:01,000
A Cláudia Luana, que ela está em atualização

644
00:31:01,000 --> 00:31:03,000
e eu não perdi o acesso.

645
00:31:03,000 --> 00:31:05,000
Meu get funcionando.

646
00:31:05,000 --> 00:31:07,000
E olha aqui, ele trabalhando.

647
00:31:07,000 --> 00:31:09,000
Meus equisições estão 100% na versão anterior

648
00:31:09,000 --> 00:31:11,000
de 22 horas atrás, que é o que está com o flagzinho aqui.

649
00:31:11,000 --> 00:31:13,000
E eu não perdi.

650
00:31:13,000 --> 00:31:15,000
Eu consigo fazer até um post aqui.

651
00:31:15,000 --> 00:31:17,000
Para qualquer coisa.

652
00:31:19,000 --> 00:31:21,000
Dá um incluir aqui.

653
00:31:21,000 --> 00:31:23,000
O outro post,

654
00:31:23,000 --> 00:31:25,000
foi, inclusive, pedido 3 aqui,

655
00:31:25,000 --> 00:31:27,000
de uma pedida no Firebase.

656
00:31:27,000 --> 00:31:29,000
Ele continua trabalhando

657
00:31:29,000 --> 00:31:31,000
e assim que ele terminar,

658
00:31:31,000 --> 00:31:33,000
aqui, olha, ele atualizou.

659
00:31:33,000 --> 00:31:35,000
Agora, 100% das equisições já estão na nova versão.

660
00:31:37,000 --> 00:31:39,000
Esse daqui é a Pegate, o que está chamando

661
00:31:39,000 --> 00:31:41,000
a outra Cloud Run.

662
00:31:41,000 --> 00:31:43,000
E o processo para atualizar essa Cloud Run

663
00:31:43,000 --> 00:31:45,000
é a mesma.

664
00:31:45,000 --> 00:31:47,000
Então, eu só vim aqui em um shell.

665
00:31:47,000 --> 00:31:49,000
Mas eu vou voltar a pasta

666
00:31:49,000 --> 00:31:51,000
para ter que ser de dois pontos.

667
00:31:51,000 --> 00:31:53,000
O LCD.

668
00:31:53,000 --> 00:31:55,000
Pedidos.

669
00:31:55,000 --> 00:31:57,000
Underline.

670
00:31:57,000 --> 00:31:59,000
B,

671
00:31:59,000 --> 00:32:01,000
R,

672
00:32:01,000 --> 00:32:03,000
C,

673
00:32:03,000 --> 00:32:05,000
R,

674
00:32:05,000 --> 00:32:07,000
C.

675
00:32:07,000 --> 00:32:09,000
E eu vou botar esse comando do Cloud Build

676
00:32:09,000 --> 00:32:11,000
e só me chamando o Cloud Build dele aqui.

677
00:32:11,000 --> 00:32:13,000
Quanto ele está executando aqui.

678
00:32:13,000 --> 00:32:15,000
E uma coisa que a gente viu nas boas práticas,

679
00:32:15,000 --> 00:32:17,000
né?

680
00:32:17,000 --> 00:32:19,000
Apenas a Pegate deve estar disposta

681
00:32:19,000 --> 00:32:21,000
e o microserviço não.

682
00:32:21,000 --> 00:32:23,000
Os microserviços dentro do orquestrador lá

683
00:32:23,000 --> 00:32:25,000
não deve estar.

684
00:32:25,000 --> 00:32:27,000
Tivesse mais microserviços dentro desse container.

685
00:32:27,000 --> 00:32:29,000
E aqui,

686
00:32:29,000 --> 00:32:31,000
dentro da

687
00:32:31,000 --> 00:32:33,000
do próprio Google,

688
00:32:33,000 --> 00:32:35,000
que se eu executar o comando,

689
00:32:35,000 --> 00:32:37,000
ele vai dar um get, né?

690
00:32:37,000 --> 00:32:39,000
Então, se eu chamar aqui,

691
00:32:39,000 --> 00:32:41,000
eu vou chamar o meu container.

692
00:32:41,000 --> 00:32:43,000
Um pedido de Firebase,

693
00:32:43,000 --> 00:32:45,000
olha, 100% de acesso.

694
00:32:45,000 --> 00:32:47,000
A Pegate eu não sei que chamar ele.

695
00:32:51,000 --> 00:32:53,000
Só esperar terminar de atualizar o container.

696
00:32:59,000 --> 00:33:01,000
Ele está terminando o Build aqui.

697
00:33:09,000 --> 00:33:11,000
Aqui os steps do

698
00:33:11,000 --> 00:33:13,000
do upper file.

699
00:33:15,000 --> 00:33:17,000
Criando

700
00:33:23,000 --> 00:33:25,000
uma target dele.

701
00:33:25,000 --> 00:33:27,000
E finalizou

702
00:33:27,000 --> 00:33:29,000
criação.

703
00:33:29,000 --> 00:33:31,000
E aqui,

704
00:33:31,000 --> 00:33:33,000
a gente vai fazer o mesmo esquema.

705
00:33:33,000 --> 00:33:35,000
A gente está

706
00:33:35,000 --> 00:33:37,000
a nossa Cloud Run do microserviço.

707
00:33:39,000 --> 00:33:41,000
Vem pro orquestrador.

708
00:33:41,000 --> 00:33:43,000
Criando

709
00:33:47,000 --> 00:33:49,000
e vou selecionar aqui a última

710
00:33:49,000 --> 00:33:51,000
versão que eu criei.

711
00:33:51,000 --> 00:33:53,000
E ao salvar,

712
00:33:53,000 --> 00:33:55,000
vou implementar aqui.

713
00:33:55,000 --> 00:33:57,000
Mesma coisa, o mesmo microserviço que está lá

714
00:33:57,000 --> 00:33:59,000
utilizando direto, o Firebase,

715
00:33:59,000 --> 00:34:01,000
continuar funcionando.

716
00:34:03,000 --> 00:34:05,000
Se eu

717
00:34:05,000 --> 00:34:07,000
alterar aqui,

718
00:34:07,000 --> 00:34:09,000
ele continua funcionando

719
00:34:09,000 --> 00:34:11,000
enquanto ele implementa

720
00:34:11,000 --> 00:34:13,000
a nova versão.

721
00:34:13,000 --> 00:34:15,000
Enquanto todos os usuários estão

722
00:34:15,000 --> 00:34:17,000
trabalhando aqui dentro

723
00:34:17,000 --> 00:34:19,000
da versão anterior até

724
00:34:19,000 --> 00:34:21,000
de atualizar de vez.

725
00:34:21,000 --> 00:34:23,000
E o que é legal aqui também,

726
00:34:23,000 --> 00:34:25,000
se eu consigo acessar as métricas

727
00:34:25,000 --> 00:34:27,000
enquanto ele atualiza,

728
00:34:27,000 --> 00:34:29,000
deixa eu ter que esperar.

729
00:34:29,000 --> 00:34:31,000
Não consigo assim.

730
00:34:31,000 --> 00:34:33,000
Opa!

731
00:34:33,000 --> 00:34:35,000
Como é que deu uma trabadinha aqui?

732
00:34:37,000 --> 00:34:39,000
E aqui a gente tem

733
00:34:39,000 --> 00:34:41,000
os relatórios

734
00:34:41,000 --> 00:34:43,000
para a gente ter tomadas de decisões

735
00:34:43,000 --> 00:34:45,000
da Cloud, de como está

736
00:34:45,000 --> 00:34:47,000
as solicitações.

737
00:34:47,000 --> 00:34:49,000
A gente vai terminar de

738
00:34:49,000 --> 00:34:51,000
pedir não a regrupas da chuva.

739
00:34:51,000 --> 00:34:53,000
Mas aqui ele vai ter

740
00:34:53,000 --> 00:34:55,000
a pontagem de solicitações

741
00:34:55,000 --> 00:34:57,000
de containers.

742
00:34:57,000 --> 00:34:59,000
De quantas instâncias ele precisou

743
00:34:59,000 --> 00:35:01,000
utilizar?

744
00:35:07,000 --> 00:35:09,000
A latência que foi, as demoras,

745
00:35:09,000 --> 00:35:11,000
você consegue ter

746
00:35:11,000 --> 00:35:13,000
uma série de informações

747
00:35:13,000 --> 00:35:15,000
da utilização do sumir para o serviço.

748
00:35:15,000 --> 00:35:17,000
Porque toda a estrutura

749
00:35:17,000 --> 00:35:19,000
da sua infraestrutura

750
00:35:19,000 --> 00:35:21,000
é controlada

751
00:35:21,000 --> 00:35:23,000
pelo Google Cloud.

752
00:35:25,000 --> 00:35:27,000
Bom pessoal,

753
00:35:27,000 --> 00:35:29,000
é isso.

754
00:35:29,000 --> 00:35:31,000
Eu não vou entrar tantos detalhes

755
00:35:31,000 --> 00:35:33,000
aqui dos relatórios.

756
00:35:33,000 --> 00:35:35,000
Ele é bem auto-explicativo.

757
00:35:35,000 --> 00:35:37,000
E espero ter conseguido

758
00:35:37,000 --> 00:35:39,000
realmente descomplicar a Cloud

759
00:35:39,000 --> 00:35:41,000
principalmente utilizando Delphi,

760
00:35:41,000 --> 00:35:43,000
que não é uma abordagem muito comum

761
00:35:43,000 --> 00:35:45,000
para a gente,

762
00:35:45,000 --> 00:35:47,000
que é do meio do Delphi.

763
00:35:47,000 --> 00:35:49,000
A gente é mais acostumado

764
00:35:49,000 --> 00:35:51,000
com os monolitos, mas a gente

765
00:35:51,000 --> 00:35:53,000
consegue trabalhar assim

766
00:35:53,000 --> 00:35:55,000
no novo formato

767
00:35:55,000 --> 00:35:57,000
e

768
00:35:57,000 --> 00:35:59,000
é isso, pessoal.

769
00:35:59,000 --> 00:36:01,000
Se alguém tiver dúvidas,

770
00:36:01,000 --> 00:36:03,000
quiser perguntar

771
00:36:03,000 --> 00:36:05,000
um momento e agora.

772
00:36:05,000 --> 00:36:07,000
Vou parar a gravação aqui.

