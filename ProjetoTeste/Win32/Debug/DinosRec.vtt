WEBVTT

00:00.000 --> 00:08.000
Alô, estou me ouvindo bem?

00:08.000 --> 00:10.000
Choc!

00:10.000 --> 00:18.000
Bom, então vamos lá pessoal, eu vou estar falando sobre Cloud com um Delphi, né?

00:18.000 --> 00:21.000
Descomplicando, mostrando mais a parte prática da Cloud.

00:21.000 --> 00:25.000
Deixa eu soltar aqui pro editor.

00:25.000 --> 00:29.000
Certo, o que que eu vou estar abordando aqui hoje, né?

00:29.000 --> 00:37.000
A gente vai estar vendo os monolitos, os microserviços, o que são as fases, as funções, as services, algumas arquiteturas.

00:37.000 --> 00:41.000
O que que é o Google Cloud Platform, o GCP?

00:41.000 --> 00:43.000
Vamos estar falando bem sobre o Cinto, sobre Docker.

00:43.000 --> 00:46.000
Aí vamos entrar um pouco na parte prática.

00:46.000 --> 00:53.000
Tem os contatos ali no final e vou abrir o espaço de dúvidas também no final.

00:53.000 --> 00:56.000
Certo, pra quem não me conhece, eu sou o Daniel Fernandes.

00:56.000 --> 00:58.000
Sou do Ovidor Senor aqui da AQUA.

00:58.000 --> 01:01.000
Tenho mais de sete anos de experiência com o Delphi.

01:01.000 --> 01:05.000
Sou graduado em gestão da TI pela FATEC de Braga São Paulo Lista.

01:05.000 --> 01:08.000
Sou pós-graduado também em geria de software pela estácio.

01:08.000 --> 01:11.000
Sou o criador do Dinos Devs no Instagram.

01:11.000 --> 01:17.000
Fiz um componente que me levou pra conference no ano passado, que é o LibreOffice pra Delphi, que é o Dinos Offices.

01:17.000 --> 01:25.000
E fui palestrante na DelphiCon de 2023, na conference do ano passado e desse ano também.

01:26.000 --> 01:28.000
Certo, então vamos começar.

01:28.000 --> 01:30.000
O que são os monolitos?

01:30.000 --> 01:35.000
O monolito é uma arquitetura de software, onde todas as funcionalidades estão no local só.

01:35.000 --> 01:43.000
Então aqui na representação do monolito, que a gente tem forma de pagamento, pedido, cadastro,

01:43.000 --> 01:48.000
tudo numa única instância e essa instância, ela comunica com o único banco de dados.

01:48.000 --> 01:53.000
E a interface de usuário consome essa instância do monolito.

01:53.000 --> 01:57.000
Há alguns casos que a extensa do usuário está até dentro do monolito também.

01:59.000 --> 02:02.000
E quais são as vantagens de se utilizar monolito?

02:02.000 --> 02:05.000
É a simplicidade inicial na arquitetura.

02:05.000 --> 02:10.000
Ele é bom pra criar MVPs, porque é bem fácil no começo do desenvolvimento.

02:10.000 --> 02:16.000
A coisão da equipe de Devs, porque só utiliza uma única linguagem.

02:16.000 --> 02:22.000
É simples pra fazer deploy na produção, porque ao atualizar um pedido,

02:22.000 --> 02:24.000
você vai atualizar toda a instância dele.

02:24.000 --> 02:27.000
Então você não tem que se preocupar com diversos serviços espalhados.

02:27.000 --> 02:31.000
E é fácil pra debugar, porque toda regra de negócio está em um único local.

02:31.000 --> 02:37.000
Tem até uma referência aqui do Martin Fowler, que ele fala pra se usar primeiro o monolito,

02:37.000 --> 02:39.000
o monolito de first.

02:39.000 --> 02:43.000
E nessa abordagem aqui que fala você para começar com o monolito.

02:43.000 --> 02:45.000
Então há diversas discussões sobre...

02:45.000 --> 02:47.000
Eu achei bem interessante o esporte dele.

02:49.000 --> 02:53.000
E quais são os desafios dos monolitos?

02:53.000 --> 02:55.000
Tudo está em um único local.

02:55.000 --> 02:59.000
Então isso tem uma alta dependência,

02:59.000 --> 03:02.000
que você não consegue mexer em uma única parte de seu software

03:02.000 --> 03:05.000
sem afetar as demais camadas.

03:05.000 --> 03:10.000
A alta dependência demora para um novo Devs habituar.

03:10.000 --> 03:13.000
Então para aprender toda a regra de negócio,

03:13.000 --> 03:16.000
você tem que entender o sistema como um todo,

03:16.000 --> 03:20.000
uma boa parte dele para conseguir se habituar ao sistema.

03:20.000 --> 03:24.000
As problemas de uma parte do software afeta ele como um todo.

03:24.000 --> 03:27.000
Se você tem que atualizar um label ali no caixa,

03:27.000 --> 03:29.000
você vai ter que atualizar todo o seu sistema,

03:29.000 --> 03:31.000
só por conta de um leigo errado.

03:31.000 --> 03:35.000
Abaixa a escalabilidade, justamente por isso,

03:35.000 --> 03:39.000
você não consegue escalar também para ser reaproveitado.

03:39.000 --> 03:42.000
Basos de dados normalmente são gigantes,

03:42.000 --> 03:45.000
e utiliza-se uma única tecnologia.

03:47.000 --> 03:49.000
E os microserviços?

03:49.000 --> 03:54.000
Os microserviços veem entre aspas para resolver o problema do monolito.

03:54.000 --> 03:57.000
Não estou aqui para definir monolito nem microserviços,

03:57.000 --> 04:00.000
só colocando as abordagens aqui.

04:00.000 --> 04:05.000
O microserviço também é um desenho de arquitetura de software,

04:05.000 --> 04:09.000
onde são definidos conjuntos pequenos de serviços independentes,

04:09.000 --> 04:14.000
cada um executa uma única funcionalidade específica.

04:14.000 --> 04:18.000
E cada serviço é alpergado entre uma entidade.

04:18.000 --> 04:21.000
Então aqui na representatividade dele,

04:21.000 --> 04:24.000
a gente pegou aquele desenho do monolito

04:24.000 --> 04:26.000
e passou ele para microserviços.

04:26.000 --> 04:28.000
Então cada um ganha sua instância.

04:28.000 --> 04:32.000
Aqui temos as vendas, os cadastros, os pedidos,

04:32.000 --> 04:36.000
e cada monolito conversa agora com o seu próprio banco de dados.

04:36.000 --> 04:40.000
Cada microserviço comunica-se com o seu próprio banco de dados.

04:44.000 --> 04:46.000
E quais as vantagens?

04:46.000 --> 04:48.000
Quando utilizarem os monolitos,

04:48.000 --> 04:51.000
aqui tem uma outra representatividade dele.

04:51.000 --> 04:53.000
É uma aplicação grande e complexa,

04:53.000 --> 04:56.000
que precisa ser altamente escalada e dimensionada,

04:56.000 --> 05:00.000
quando a aplicação possui muitos domínios e subdomínios,

05:00.000 --> 05:03.000
e quando a necessidade de integração e implementação continua.

05:03.000 --> 05:06.000
A gente vai ver um pouco mais a fundo esses tópicos também.

05:06.000 --> 05:10.000
Aqui é um desenho de como a estrutura de um microserviço.

05:10.000 --> 05:12.000
E aqui tem uma frase que eu achei bem legal,

05:12.000 --> 05:14.000
que é vincular dos microserviços.

05:14.000 --> 05:17.000
Não use uma basuca para matar uma formiga.

05:17.000 --> 05:19.000
Então tem que analisar muito bem essa arquitetura

05:19.000 --> 05:21.000
se vale a pena para o seu projeto.

05:23.000 --> 05:26.000
E quais são as características do microserviço?

05:26.000 --> 05:29.000
Dividir as tarefas de formas independentes

05:29.000 --> 05:32.000
no serviço deve implementar apenas uma função,

05:32.000 --> 05:35.000
a troca de serviço é feita de maneira ágil,

05:35.000 --> 05:39.000
a comunicação pelos microserviços é feita via a page,

05:39.000 --> 05:43.000
é construída através de pequenas responsabilidades,

05:43.000 --> 05:46.000
tem características de ter depois automatizados,

05:46.000 --> 05:48.000
isso depende mais do seu DevOps.

05:48.000 --> 05:51.000
E pode-se usar várias linguagens diferentes.

05:51.000 --> 05:53.000
Aqui tem uma representação também.

05:53.000 --> 05:55.000
Aqui é o que vamos construir.

05:55.000 --> 05:58.000
É um cliente, uma API Gateway,

05:58.000 --> 06:01.000
um orquestrador de containers, o container,

06:01.000 --> 06:03.000
o orquestrador vai ser o Google ArchPact,

06:03.000 --> 06:05.000
o container é o Docker,

06:05.000 --> 06:09.000
e aqui mostrando a possibilidade de utilizar diversas linguagens,

06:09.000 --> 06:11.000
tipo Java, Quart, o Google,

06:11.000 --> 06:13.000
e a comunicação com os bancos de dados.

06:13.000 --> 06:16.000
No caso a gente vai utilizando o NoSQL,

06:16.000 --> 06:19.000
ou utilizando uma Firebase.

06:21.000 --> 06:24.000
E as vantagens de se utilizar um microserviço?

06:24.000 --> 06:27.000
Isso. A escalabilidade é eficiente,

06:27.000 --> 06:30.000
se conseguir escalar melhor essa software,

06:30.000 --> 06:33.000
isso tem facilidade na manutenção.

06:33.000 --> 06:36.000
Isso aqui é um ponto meio divergente também.

06:36.000 --> 06:38.000
A tecnologia é diversificada,

06:38.000 --> 06:40.000
essa facilidade na manutenção

06:40.000 --> 06:43.000
é no sentido de você ter códigos menores para analisar.

06:43.000 --> 06:46.000
Ele é resiliente e tolerante à falha,

06:46.000 --> 06:50.000
então se você se preocupar com os acuplamentos,

06:50.000 --> 06:53.000
o microserviço não vai parar o outro,

06:53.000 --> 06:56.000
e no movimento em paralelo você consegue quebrar

06:56.000 --> 06:58.000
o seu microserviço em vários microserviços,

06:58.000 --> 07:02.000
então você tem a possibilidade de granularizar bem o seu software,

07:02.000 --> 07:05.000
e a facilidade de escalabilidade horizontal,

07:05.000 --> 07:08.000
que é isso de granularizar o software.

07:10.000 --> 07:12.000
E os desafios?

07:12.000 --> 07:15.000
A complexidade é devido do tamanho da arquitetura,

07:15.000 --> 07:17.000
testes de refatoração,

07:17.000 --> 07:20.000
esse ponto aqui e você tem input e você tem output,

07:20.000 --> 07:23.000
e você tem pequenas séries de negócios no microserviço,

07:23.000 --> 07:27.000
porém para você encontrar onde pode estar o problema,

07:27.000 --> 07:29.000
é um pouco mais demorado.

07:29.000 --> 07:32.000
O aumento de custo para resolver bugs,

07:32.000 --> 07:34.000
o aumento de custo no sentido do tempo que o desenvolvedor

07:34.000 --> 07:36.000
vai levar para encontrar onde dá o problema,

07:36.000 --> 07:38.000
pode ser maior.

07:38.000 --> 07:42.000
A latência, a comunicação é feita sempre via rede HTTP,

07:42.000 --> 07:45.000
no caso o Google oferece o viciPi,

07:45.000 --> 07:48.000
que é um consensus uma rede local dentro da cloud,

07:48.000 --> 07:52.000
essa rede local você consegue colocar seus fases para se comunicarem,

07:52.000 --> 07:54.000
então isso foi dos bastantes,

07:54.000 --> 07:56.000
e a latência mais ainda assim estamos tratando de HTTP,

07:56.000 --> 07:58.000
aquisições de HTTP,

07:58.000 --> 08:01.000
então por isso uma desvantagem.

08:01.000 --> 08:05.000
O gerenciamento de dados ao longo do prazo,

08:05.000 --> 08:08.000
você vai ter vários bancos e em algum determinado momento

08:08.000 --> 08:10.000
isso pode ser complexo de gerenciar,

08:10.000 --> 08:12.000
e nem todos os aplicativos são grandes,

08:12.000 --> 08:14.000
o suficiente para ser divididos em microserviços,

08:14.000 --> 08:16.000
isso aqui vale muito levar em contas.

08:16.000 --> 08:19.000
Na hora de escolher essa aplicação.

08:21.000 --> 08:24.000
E as boas práticas do microserviço?

08:24.000 --> 08:27.000
Cada serviço é uma arquitetura de microserviço,

08:27.000 --> 08:31.000
possui o seu próprio bug de dados na sua arquitetura,

08:31.000 --> 08:35.000
ou utiliza de preferência a comunicação acíncrona,

08:35.000 --> 08:38.000
a comunicação dos microserviços deve ser realizada

08:38.000 --> 08:40.000
de exposição de APIs,

08:40.000 --> 08:42.000
de APIs REST,

08:42.000 --> 08:45.000
que deve se evitar o acoplamento,

08:45.000 --> 08:47.000
a pay gateway,

08:47.000 --> 08:50.000
ela deve ser a centralização das autenticações,

08:50.000 --> 08:52.000
rotas e balanceamentos de cargas,

08:52.000 --> 08:55.000
logs, as limitações,

08:55.000 --> 08:57.000
tudo deve acontecer dentro dela,

08:57.000 --> 08:59.000
ela é como se um swagger,

08:59.000 --> 09:01.000
o melhor ela é um swagger,

09:01.000 --> 09:04.000
e evitar falhas em cascatas,

09:04.000 --> 09:07.000
você evitando os apoclamentos do microserviço,

09:07.000 --> 09:09.000
você não tendo dependências,

09:09.000 --> 09:11.000
ou mínimas dependências de um microserviço para o outro,

09:11.000 --> 09:13.000
você vai conseguir evitar falhas em cascatas,

09:13.000 --> 09:15.000
então um microserviço não vai parar o outro

09:15.000 --> 09:18.000
por deixar que o curso está falhando em algum momento.

09:20.000 --> 09:24.000
E como que migra um monolito para um microserviço?

09:24.000 --> 09:29.000
Primeiro, você extrai uma funcionalidade do seu monolito,

09:29.000 --> 09:31.000
passe ele para o microserviço,

09:31.000 --> 09:33.000
e você faz os testes,

09:33.000 --> 09:35.000
você evita refaturar tudo de uma vez,

09:35.000 --> 09:40.000
você deve primeiro pensar em desapoplar o serviço do monolito,

09:43.000 --> 09:47.000
as organizações na hora de passagem do monolito para o microserviço

09:47.000 --> 09:49.000
deve sempre pensar nas regras de negócio,

09:49.000 --> 09:51.000
e não necessariamente na tecnologia,

09:51.000 --> 09:52.000
nesse momento,

09:52.000 --> 09:55.000
e ao migrar gradualmente os serviços,

09:55.000 --> 09:59.000
pode-se utilizar um patrón chamado Tierra Database,

09:59.000 --> 10:02.000
que você pega vários microserviços,

10:02.000 --> 10:04.000
que você foi passando,

10:04.000 --> 10:06.000
e reaproveita a base de dados,

10:06.000 --> 10:10.000
e depois você vem desapoplando as bases de dados,

10:10.000 --> 10:15.000
então compartilhar a base de dados entre os microserviços é algo temporário,

10:17.000 --> 10:21.000
e o microserviço exige muita automação,

10:21.000 --> 10:24.000
então deve-se pensar bastante,

10:24.000 --> 10:27.000
não devolve-se nesse momento para fazer os bílgues,

10:27.000 --> 10:30.000
criar as automatizações, as pipeline,

10:33.000 --> 10:34.000
e o que eu faço?

10:35.000 --> 10:39.000
Não dá para trabalhar com cloud microserviços e sem falar de faz,

10:39.000 --> 10:42.000
faz um serviço de back-end, um servidor,

10:42.000 --> 10:45.000
que não é um servidor,

10:45.000 --> 10:47.000
vamos dizer ali, um serviço,

10:47.000 --> 10:49.000
que vai ficar escutando,

10:49.000 --> 10:51.000
e toda vez que chegar uma requisição HTTP,

10:51.000 --> 10:54.000
ele vai expor esse serviço,

10:54.000 --> 10:56.000
disparar um segundo o serviço,

10:56.000 --> 10:59.000
e dar um retorno para a gente, e desligar,

10:59.000 --> 11:03.000
e quais as vantagens de utilizar esse formato,

11:03.000 --> 11:05.000
ou função, como serviço?

11:05.000 --> 11:08.000
Você tem melhoria na idosa de desenvolvimento,

11:08.000 --> 11:13.000
porque você não precisa se preocupar com a infraestrutura,

11:13.000 --> 11:16.000
ela é toda gerenciada pelo produtor de cloud,

11:16.000 --> 11:19.000
mas pela habilidade embutida,

11:19.000 --> 11:23.000
então você também não precisa se preocupar com o tráfico,

11:23.000 --> 11:28.000
com a indigência, isso também vai ser gerenciado pela cloud,

11:28.000 --> 11:31.000
e a eficiência de custo, porque você não paga um servidor,

11:31.000 --> 11:33.000
você não tem um servidor lá todo o tempo ligado,

11:33.000 --> 11:35.000
uma máquina virtual,

11:35.000 --> 11:39.000
você só vai pagar quando a requisição foi disparada,

11:39.000 --> 11:41.000
levantou a sua função,

11:41.000 --> 11:43.000
ela executou seu microserviço,

11:43.000 --> 11:45.000
te deu um retorno e desligou,

11:45.000 --> 11:48.000
a partir desse momento já não é cobrado mais custo,

11:48.000 --> 11:51.000
é um taxímetro ali.

11:54.000 --> 11:56.000
E quais os desafios do FAS?

11:56.000 --> 11:58.000
Você tem menor controle do sistema,

11:58.000 --> 12:01.000
porque você não tem acesso direto à infraestrutura,

12:01.000 --> 12:06.000
então na hora de entender você pode ter uma certa complexidade,

12:06.000 --> 12:09.000
e é mais complexo para a testa,

12:09.000 --> 12:12.000
porque na hora de testar você vai ter que utilizar o ambiente local

12:12.000 --> 12:15.000
e você vai ter que tentar reproduzir o mais real possível

12:15.000 --> 12:20.000
o ambiente da cloud na sua máquina de testes,

12:20.000 --> 12:24.000
e o service, o conceito dele.

12:24.000 --> 12:28.000
O conceito do service é exatamente isso da área da FAS,

12:28.000 --> 12:30.000
o service são implementados em contêneres

12:30.000 --> 12:32.000
que são iniciados sobre demanda,

12:32.000 --> 12:35.000
então a FAS é um service,

12:35.000 --> 12:39.000
o service seria mais um conceito e o FAS seria algo mais palpável.

12:41.000 --> 12:45.000
E aqui uma representação das arquiteturas,

12:45.000 --> 12:48.000
aqui eu trouxe o FAS e o service só para comparar

12:48.000 --> 12:51.000
que aqui é um cloud se pagando funções,

12:51.000 --> 12:56.000
que é a mesma representação do service que é uma cloud se pagando funções.

12:56.000 --> 12:59.000
Aqui é o que vamos construir, que eu já expliquei,

12:59.000 --> 13:03.000
e aqui é como funciona o GCP para a gente trabalhar com as FAS.

13:03.000 --> 13:05.000
A gente vai ter o cloud build,

13:05.000 --> 13:09.000
que vai gerar o artifact que vai ser o nosso orquestrador de contêneres,

13:09.000 --> 13:11.000
que vai guardar nossos dolares,

13:11.000 --> 13:14.000
e a cloud run é o nosso FAS,

13:14.000 --> 13:18.000
é o que vai ser disparado, que vai chamar os microservices.

13:21.000 --> 13:23.000
E o que é o GCP?

13:23.000 --> 13:24.000
O que é o Google Cloud?

13:24.000 --> 13:27.000
O cloud nada mais é do que recursos físicos e virtuais

13:27.000 --> 13:30.000
espalhados por todos os cantos do mundo,

13:30.000 --> 13:33.000
e o Google Cloud Platform, que é o GCP,

13:33.000 --> 13:36.000
ele é um provedor de recursos de computação em Google,

13:36.000 --> 13:38.000
então ele é uma suíte de várias soluções,

13:38.000 --> 13:42.000
a gente não vai conseguir ver nenhum por cento do que ele fornece,

13:42.000 --> 13:46.000
acredito que para ver isso somente em uma certificação,

13:48.000 --> 13:52.000
mas vamos utilizar aqui para trabalhar com o FAS.

13:52.000 --> 13:55.000
E aqui são os comandos básicos que a gente vai utilizar,

13:55.000 --> 13:57.000
que eu deixei aqui.

13:58.000 --> 14:01.000
E aqui as bibliotecas que a gente vai utilizar nele,

14:01.000 --> 14:02.000
que é o App Engine,

14:02.000 --> 14:05.000
que ele é responsável pela criação dos aplicativos.

14:05.000 --> 14:08.000
O cloud build, que é o construtor do aplicativo,

14:08.000 --> 14:13.000
o artifact, que é o nosso orquestrador,

14:14.000 --> 14:17.000
o cloud run, que é a nossa FAS,

14:17.000 --> 14:20.000
ele é o que vai disparar o serviço,

14:20.000 --> 14:25.000
e o IAM é o que controla as permissões.

14:27.000 --> 14:30.000
E aí só para a gente fechar aqui a parte teórica,

14:30.000 --> 14:32.000
sobre o que é o Docker,

14:32.000 --> 14:35.000
o Docker são containers virtuais

14:35.000 --> 14:38.000
que você consegue rodar imagens do sistema professional,

14:38.000 --> 14:40.000
pode rodar Windows,

14:40.000 --> 14:42.000
pode rodar Windows, pode rodar Mac.

14:42.000 --> 14:44.000
Eu estou utilizando o Linux, porque não faz sentido

14:44.000 --> 14:48.000
num teste você pagar uma licença Windows,

14:48.000 --> 14:50.000
mas eu não vou entrar nesse método do sistema professional,

14:50.000 --> 14:52.000
da compilação, para compilar o delft para Linux,

14:52.000 --> 14:54.000
você pode utilizar o Pa server,

14:54.000 --> 14:56.000
tem bastante vídeo no internet sobre ele.

14:57.000 --> 15:00.000
E aqui tem os comandos básicos do Docker,

15:00.000 --> 15:01.000
porque a gente vai utilizar,

15:01.000 --> 15:05.000
eu deixei esse, e esse sudo Docker build aqui,

15:06.000 --> 15:09.000
felizado, porque a gente vai utilizar ele dentro da cloud,

15:09.000 --> 15:11.000
não vai dar tempo de mostrar ele,

15:11.000 --> 15:15.000
rodando no nosso ambiente local.

15:16.000 --> 15:20.000
Então, como diz o Linux,

15:20.000 --> 15:22.000
tal que este show me decode,

15:22.000 --> 15:24.000
vamos para a parte prática.

15:26.000 --> 15:28.000
Então, aqui no delft,

15:29.000 --> 15:31.000
o delft não tem nada demais nele,

15:31.000 --> 15:33.000
aqui é a minha pay gate,

15:33.000 --> 15:35.000
vamos construir,

15:35.000 --> 15:36.000
só voltar aqui,

15:36.000 --> 15:38.000
aqui é a minha pay gate.

15:38.000 --> 15:41.000
Então, aqui é apenas um Morse,

15:41.000 --> 15:44.000
estou dando na porta 8080,

15:44.000 --> 15:47.000
com os cores ativos,

15:47.000 --> 15:49.000
onde temos as nossas fotos.

15:56.000 --> 15:58.000
E aqui nas fotos,

15:58.000 --> 16:01.000
eu estou indicando os verbos HTTPs que eu vou estar utilizando,

16:01.000 --> 16:04.000
que é o get, post, boot, delet,

16:04.000 --> 16:06.000
e o path,

16:06.000 --> 16:08.000
e para cada,

16:08.000 --> 16:10.000
para cada verba HTTP,

16:10.000 --> 16:12.000
eles são rest,

16:12.000 --> 16:14.000
para dentro do meu microservice.

16:14.000 --> 16:16.000
No caso aqui,

16:16.000 --> 16:18.000
eu tenho um endereço que o cloud me fornece,

16:18.000 --> 16:20.000
mas é minha ORI.

16:20.000 --> 16:22.000
E este aqui é a minha pay gate,

16:22.000 --> 16:25.000
então ela vai cuidar da volta do meu microservice,

16:26.000 --> 16:29.000
e aqui é o meu microservice de delivery,

16:29.000 --> 16:30.000
que é o exemplo que eu criei.

16:30.000 --> 16:31.000
Também é um Morse,

16:31.000 --> 16:33.000
estou dando na porta 8080,

16:33.000 --> 16:34.000
o mesmo critério,

16:34.000 --> 16:35.000
tem as minhas ORIs,

16:35.000 --> 16:38.000
que são os meus verbos HTTPs,

16:38.000 --> 16:40.000
e dispara uma requisição aqui,

16:40.000 --> 16:41.000
no caso aqui,

16:41.000 --> 16:44.000
ele está disparando para o meu Firebase,

16:44.000 --> 16:46.000
que é o meu banco de dados aqui.

16:48.000 --> 16:50.000
Certo,

16:50.000 --> 16:52.000
então vamos para,

16:52.000 --> 16:54.000
vamos para a nuvem.

16:54.000 --> 16:58.000
Aqui não consegui ativar todos os serviços aqui,

16:58.000 --> 16:59.000
porque leva um bom tempo,

16:59.000 --> 17:01.000
só para criar o cloud build,

17:01.000 --> 17:03.000
ali em uns 10 minutos.

17:03.000 --> 17:05.000
Então aqui dentro da cloud,

17:05.000 --> 17:07.000
é só dar um novo projeto,

17:07.000 --> 17:09.000
porque eu já tenho um criado aqui,

17:09.000 --> 17:11.000
eu estou utilizando o meu projeto,

17:11.000 --> 17:12.000
não tem nada de mais,

17:12.000 --> 17:14.000
é só ir seguindo o que vai pedir,

17:14.000 --> 17:16.000
praticamente um next-next finish ali.

17:16.000 --> 17:21.000
E para você ativar as bibliotecas que eu citei aqui,

17:21.000 --> 17:23.000
que está aqui,

17:23.000 --> 17:25.000
é só escrever o nome delas,

17:25.000 --> 17:27.000
o App Engine,

17:31.000 --> 17:33.000
é só escrever aqui o App Engine,

17:33.000 --> 17:35.000
e ele vai aparecer por aqui.

17:37.000 --> 17:39.000
Aqui o App Engine,

17:39.000 --> 17:40.000
no caso do App Engine,

17:40.000 --> 17:41.000
na hora de criar,

17:41.000 --> 17:43.000
ele é a única atenção dele que você tem que colocar na linguagem

17:43.000 --> 17:44.000
que ele fosse estar,

17:44.000 --> 17:45.000
vai estar lá para,

17:45.000 --> 17:47.000
então, JavaScript,

17:47.000 --> 17:49.000
PHP, você coloca em outros,

17:49.000 --> 17:51.000
e o ambiente dele vai ser flexível.

17:51.000 --> 17:52.000
O outros,

17:52.000 --> 17:55.000
quer dizer que a gente vai utilizar binários,

17:55.000 --> 18:00.000
e o flexível quer dizer que a gente vai utilizar os containers.

18:00.000 --> 18:03.000
Então é só clicar nele e fazer a criação dele,

18:03.000 --> 18:05.000
o mesmo a gente vai utilizar para o cloud build,

18:05.000 --> 18:08.000
é só escrever o cloud build aqui,

18:08.000 --> 18:10.000
porque ele vai sugerir para você,

18:10.000 --> 18:11.000
você vai só ativar também,

18:11.000 --> 18:13.000
vai só dar um Enable nele,

18:13.000 --> 18:16.000
e é só seguir esses mesmos passos para todos aqui.

18:16.000 --> 18:19.000
Não precisa criar um tipo de configuração nele,

18:19.000 --> 18:20.000
só o App Engine que você vai ter que apontar

18:20.000 --> 18:23.000
aquela linguagem flexível,

18:23.000 --> 18:26.000
e após ter ativado todos,

18:26.000 --> 18:29.000
a gente vai vir aqui,

18:29.000 --> 18:33.000
e vai entrar no Google Shell,

18:33.000 --> 18:37.000
e vai levar um tempinho que só vai iniciar a máquina,

18:37.000 --> 18:39.000
e eu vou abrir em uma lateral aqui,

18:39.000 --> 18:44.000
para a gente ter uma aba dedicada para o console.

18:54.000 --> 18:56.000
Aqui dentro do console,

18:56.000 --> 19:00.000
eu vou indicar o meu projeto,

19:00.000 --> 19:03.000
que é esse projeto de livro que eu criei aqui,

19:03.000 --> 19:06.000
esse que está apontado aqui,

19:06.000 --> 19:08.000
e aí aqui dentro,

19:08.000 --> 19:09.000
a gente vai clicar nesse lá,

19:09.000 --> 19:11.000
precisinho aqui para abrir o editor,

19:11.000 --> 19:14.000
por padrão, toda vez que a gente cria um projeto,

19:14.000 --> 19:16.000
o Google ele já cria uma pasta para a gente,

19:16.000 --> 19:21.000
então é só vir aqui no open folder,

19:21.000 --> 19:24.000
e aqui eu criei uma pasta chamada de livro,

19:24.000 --> 19:27.000
e eu vou abrir ela.

19:31.000 --> 19:33.000
Aqui, no meu arquivo locais,

19:33.000 --> 19:36.000
eu tenho os dois compilados do Delfin,

19:36.000 --> 19:40.000
que é a mpd8 e meu microservice,

19:40.000 --> 19:42.000
e que são os binários do Linux,

19:42.000 --> 19:44.000
que eu estou utilizando no WSL,

19:44.000 --> 19:45.000
estou utilizando o Linux aqui,

19:45.000 --> 19:48.000
que é o Google que estou rodando,

19:48.000 --> 19:50.000
eu vou precisar do meu app,

19:50.000 --> 19:52.000
e o meu cloud build em,

19:52.000 --> 19:54.000
e o docker file,

19:54.000 --> 19:56.000
então o que a gente vai fazer com esses arquivos,

19:56.000 --> 20:00.000
a gente vai passar aqui para dentro do cloud,

20:00.000 --> 20:04.000
no caso eu criei aqui uma pasta chamada apg8,

20:04.000 --> 20:07.000
e uma pasta do delivery do microservice,

20:07.000 --> 20:10.000
e no caso aqui é só rastar para o navegador,

20:10.000 --> 20:12.000
eu já economizei um tempo aqui de subir o upload,

20:12.000 --> 20:14.000
deixa eu deixar ele aqui,

20:14.000 --> 20:17.000
e como que funcionam essas estruturas,

20:17.000 --> 20:19.000
esse app M aqui,

20:19.000 --> 20:23.000
é o que indica para o nosso app engine,

20:23.000 --> 20:27.000
que ele está funcionando em um ambiente flexível,

20:27.000 --> 20:29.000
aqui de containers,

20:29.000 --> 20:32.000
e o runtime dele é um custom,

20:32.000 --> 20:34.000
porque vai ser um binário,

20:34.000 --> 20:36.000
no caso se fosse Python, ele teria Python,

20:36.000 --> 20:38.000
ele é a versão do comprador do Python,

20:38.000 --> 20:41.000
aqui o nosso cloud build,

20:41.000 --> 20:45.000
aqui eu estou apontando para o serviço do docker,

20:45.000 --> 20:47.000
dentro da cloud,

20:47.000 --> 20:49.000
e lembra que eu deixei aqui,

20:49.000 --> 20:51.000
marcado no docker,

20:51.000 --> 20:53.000
esse comando eu subo,

20:53.000 --> 20:55.000
e o docker build-d,

20:55.000 --> 20:58.000
isso aqui é o comando que a gente utiliza para criar o docker,

20:58.000 --> 21:01.000
então no caso eu estou apontando para o Google,

21:01.000 --> 21:02.000
que nos argumentos dele,

21:02.000 --> 21:04.000
o que eu quero que o docker faça,

21:04.000 --> 21:06.000
que é o build-d,

21:06.000 --> 21:08.000
dentro do meu repositório,

21:08.000 --> 21:11.000
e a imagem que eu quero que ele crie,

21:11.000 --> 21:14.000
e aqui eu estou só apontando qualquer imagem,

21:15.000 --> 21:17.000
e para ele criar essa imagem para mim,

21:17.000 --> 21:19.000
ele precisa desse arquivo aqui,

21:19.000 --> 21:21.000
o docker file,

21:21.000 --> 21:23.000
dentro do docker file,

21:23.000 --> 21:24.000
para você utilizar o docker,

21:24.000 --> 21:27.000
você vai ter que ter uma conta aqui no docker hub,

21:27.000 --> 21:29.000
e aqui no docker hub,

21:29.000 --> 21:32.000
eu estou utilizando essa imagem do Ubuntu,

21:32.000 --> 21:37.000
e aqui dentro do Ubuntu estou utilizando a versão 2204 dele,

21:37.000 --> 21:40.000
então eu estou dizendo tudo isso na minha cloud,

21:40.000 --> 21:43.000
que eu quero pegar o Ubuntu 22.4,

21:43.000 --> 21:46.000
que ele vai ser apontado para essa imagem,

21:46.000 --> 21:50.000
e aqui os runs são os passos que vão ser criados,

21:50.000 --> 21:53.000
então eu estou dizendo que para ele criar,

21:53.000 --> 21:55.000
depois que ele baixar a imagem,

21:55.000 --> 21:58.000
ele vai dar uma apt-get update para atualizar o sistema operacional,

21:58.000 --> 22:00.000
e vai instalar essas links,

22:00.000 --> 22:02.000
como eu estou trabalhando com o horse,

22:02.000 --> 22:03.000
eu estou trabalhando com o HTTP,

22:03.000 --> 22:06.000
e eu preciso do ssr e do kernel aqui,

22:06.000 --> 22:09.000
então essas duas bibliotecas que são bem importantes,

22:09.000 --> 22:13.000
e essas são meio que padrões do docker.

22:13.000 --> 22:16.000
Estou pedindo para ele criar uma pasta chamada web,

22:16.000 --> 22:17.000
dar uma mkdir aqui,

22:17.000 --> 22:20.000
para quem fez os cursinhos de semideira,

22:20.000 --> 22:22.000
é o mesmo comando,

22:22.000 --> 22:25.000
estou pedindo para ele copiar aqui a minha pg8,

22:25.000 --> 22:28.000
que é o meu binário para dentro da pasta f,

22:28.000 --> 22:30.000
então eu estou pegando de fora,

22:30.000 --> 22:32.000
e passando para dentro do container que ele vai criar.

22:32.000 --> 22:36.000
Aqui eu estou chmodi para dar a permissão do Linux,

22:36.000 --> 22:38.000
então estou dando a renúncia hmodi aqui

22:38.000 --> 22:41.000
para eu ter permissão no meu binário,

22:41.000 --> 22:44.000
dizendo que eu vou expor o meu container na porta 8080,

22:44.000 --> 22:47.000
que é a porta que o horse está escutando,

22:47.000 --> 22:49.000
e aqui eu estou dizendo que a minha workdir,

22:49.000 --> 22:52.000
que é para eu posicionar na minha porta,

22:52.000 --> 22:56.000
na minha pasta app,

22:56.000 --> 22:58.000
então quando for levantado a container,

22:58.000 --> 23:00.000
eu vou estar na porta app,

23:00.000 --> 23:04.000
e eu vou dar um cmd.bpg8,

23:04.000 --> 23:09.000
esse cmd.bpg8 é para instartar o binário dentro do Linux,

23:09.000 --> 23:12.000
e o mesmo aqui é a mesma configuração que prometa o serviço,

23:12.000 --> 23:14.000
no caso do acerfile dele,

23:14.000 --> 23:17.000
a única diferença é que ele está passando o binário

23:17.000 --> 23:22.000
do micro serviço para dentro do container.

23:22.000 --> 23:24.000
E aqui no shell,

23:24.000 --> 23:27.000
a gente tem que só que entrar na raiz

23:27.000 --> 23:29.000
onde está o cloudbuild,

23:29.000 --> 23:31.000
e a gente vai instartar ele,

23:31.000 --> 23:36.000
vamos dar um cmd.bpg8,

23:36.000 --> 23:38.000
e vamos entrar aqui na nossa pg8,

23:38.000 --> 23:45.000
então cmd.bpg8,

23:45.000 --> 23:50.000
ele aqui de sensitive.

23:50.000 --> 23:52.000
E esse para ver o diretório,

23:52.000 --> 23:55.000
certo, estou aqui, tenho o binário,

23:55.000 --> 23:57.000
e as umas arquivas de configuração,

23:57.000 --> 24:00.000
o cloudbuild, o app está apontando o app engine,

24:00.000 --> 24:02.000
o cloudbuild vai chamar o Dockerfile,

24:02.000 --> 24:05.000
e vai fazer a construção.

24:05.000 --> 24:07.000
Para criar um repositório,

24:07.000 --> 24:09.000
no meu caso aqui,

24:09.000 --> 24:14.000
eu vou entrar no artifacts aqui,

24:14.000 --> 24:16.000
que é o nosso orquestrador,

24:16.000 --> 24:19.000
eu já criei a minha paixinha com o repositório,

24:19.000 --> 24:22.000
que é o meu Dockerhackle aqui.

24:22.000 --> 24:25.000
E para fazer essa criação,

24:25.000 --> 24:28.000
ele vai estar aqui dentro.

24:28.000 --> 24:30.000
É esse comando aqui para criar o repositório,

24:30.000 --> 24:34.000
que é o de cloud, artifacts, repositories,

24:34.000 --> 24:37.000
create.hackle,

24:37.000 --> 24:40.000
e é só rodar esse comando aqui dentro da cloud,

24:40.000 --> 24:42.000
não é uma coisa que ele vai na falha,

24:42.000 --> 24:45.000
porque ele vai dizer que eu já tenho esse repositório.

24:45.000 --> 24:47.000
Quando roda o primeiro comando dentro de uma pasta,

24:47.000 --> 24:49.000
ele perde uma autorização,

24:49.000 --> 24:51.000
é só clicar em autorizar,

24:51.000 --> 24:54.000
ele vai rodar com a conta aqui do Google,

24:54.000 --> 24:57.000
e aqui está o Dockerhackle,

24:57.000 --> 25:00.000
que é o que eu já criei,

25:00.000 --> 25:03.000
e ele guarda o meu container.

25:03.000 --> 25:07.000
Caso eu vou ter dois containers aqui dentro.

25:07.000 --> 25:10.000
Caso ele só der um erro dizendo que já existe,

25:10.000 --> 25:12.000
que existe.

25:12.000 --> 25:14.000
E para criar esse container,

25:14.000 --> 25:15.000
como funciona,

25:15.000 --> 25:18.000
é esse comando aqui de cloudbuildsubmit,

25:18.000 --> 25:21.000
eu vou chamando o configurador,

25:21.000 --> 25:24.000
e vou apontar para o meu cloudbuild,

25:24.000 --> 25:26.000
que é o cloudbuild dessa pasta aqui.

25:26.000 --> 25:28.000
Então ele vai executar só esses arquivos aqui.

25:28.000 --> 25:30.000
Aí depois se repete o mesmo processo

25:30.000 --> 25:32.000
para o meu outro microservice.

25:32.000 --> 25:35.000
Então, ao rodar ele aqui,

25:35.000 --> 25:38.000
ele vai começar a fazer a criação.

25:42.000 --> 25:44.000
O container cria aqui, o que ele vai fazer?

25:44.000 --> 25:45.000
Ele vai criar uma imagem,

25:45.000 --> 25:48.000
e nessa imagem você consegue

25:48.000 --> 25:50.000
controlar suas versões.

25:50.000 --> 25:53.000
Aqui eu tenho as versões anteriores,

25:53.000 --> 25:55.000
e aqui eu tenho a última que eu testei,

25:55.000 --> 25:56.000
que foi a 22 horas atrás.

25:56.000 --> 25:58.000
No suporto eu estou subindo uma versão,

25:58.000 --> 26:00.000
e ela está com bug,

26:00.000 --> 26:01.000
e eu preciso voltar.

26:01.000 --> 26:04.000
É só eu vim apontar para o container anterior,

26:04.000 --> 26:06.000
que está com a versão anterior do meu binário.

26:06.000 --> 26:08.000
E você não precisa parar

26:08.000 --> 26:10.000
em nenhum momento o seu cliente.

26:10.000 --> 26:12.000
Então se você tem, sei lá,

26:12.000 --> 26:14.000
10 mil clientes pendurados,

26:14.000 --> 26:15.000
ele não subir para o serviço,

26:15.000 --> 26:16.000
ele está bugado,

26:16.000 --> 26:17.000
e você tem 1 ou 2 mil clientes.

26:17.000 --> 26:19.000
Você atualiza,

26:19.000 --> 26:23.000
e aí ele espera todas as requisições anteriores terminar,

26:23.000 --> 26:25.000
e ele passa para a nova.

26:25.000 --> 26:28.000
Enquanto está aqui, ele...

26:33.000 --> 26:34.000
A hora que se pode dar,

26:34.000 --> 26:36.000
ele sempre vai dar um erro, não é?

26:47.000 --> 26:49.000
Eu acho que...

26:49.000 --> 26:51.000
eu zoei o meu...

26:51.000 --> 26:53.000
meu apetite.

27:05.000 --> 27:07.000
A gente só vê o que aconteceu aqui.

27:07.000 --> 27:17.000
A gente está procurando o meu...

27:25.000 --> 27:28.000
E após criar aqui o container,

27:28.000 --> 27:31.000
a gente vai vincular o container com a nossa cloud,

27:31.000 --> 27:34.000
então vai executando e eu vou correndo aqui.

27:37.000 --> 27:40.000
Aqui dentro, para criar uma cloud LAN,

27:40.000 --> 27:41.000
que é a nossa faz,

27:41.000 --> 27:43.000
é só dar um criar serviço aqui.

27:43.000 --> 27:45.000
Como eu já tenho ele,

27:45.000 --> 27:46.000
então eu não vou criar dos animais,

27:46.000 --> 27:48.000
eu vou mostrar aqui como funciona.

27:48.000 --> 27:50.000
É só selecionar o container

27:50.000 --> 27:51.000
que você acabou de criar,

27:51.000 --> 27:53.000
no caso da versão dele,

27:53.000 --> 27:55.000
ele vai ir para o propiastrador,

27:55.000 --> 27:56.000
vai expandindo,

27:56.000 --> 27:58.000
vai pegar o container,

27:58.000 --> 28:00.000
e aqui é a última que eu tenho aqui,

28:00.000 --> 28:02.000
quando você está buildando a outra ali,

28:02.000 --> 28:04.000
e você seleciona ela.

28:04.000 --> 28:06.000
Então você apontou aqui sua cloud,

28:06.000 --> 28:08.000
a sua cloud LAN toda vez que ela for chamada,

28:08.000 --> 28:10.000
vai disparar esse container.

28:10.000 --> 28:12.000
E a...

28:12.000 --> 28:14.000
e o que você está dizendo,

28:14.000 --> 28:16.000
que já tem nos distâncias

28:16.000 --> 28:18.000
e o tipo de autenticação,

28:18.000 --> 28:20.000
no caso eu estou utilizando autenticação

28:20.000 --> 28:22.000
direto na pgtwin.

28:22.000 --> 28:24.000
Então eu só abrir a minha pgtwin,

28:24.000 --> 28:26.000
que eu já tenho criado aqui.

28:27.000 --> 28:29.000
Agora ele está rodando certinho aqui.

28:29.000 --> 28:31.000
Ele já começou a dar os steps aqui,

28:31.000 --> 28:34.000
que são os runs que eu apontei

28:34.000 --> 28:36.000
aqui no Dockerfine.

28:39.000 --> 28:41.000
E aqui dentro,

28:41.000 --> 28:43.000
o que acontece quando a gente implementa?

28:43.000 --> 28:45.000
Ele ganha uma URL aqui.

28:45.000 --> 28:47.000
Então eu vou trabalhar

28:47.000 --> 28:49.000
com essa URL toda vez que eu chamar

28:49.000 --> 28:51.000
essa URL barra,

28:51.000 --> 28:53.000
o que está dentro do meu Docker,

28:53.000 --> 28:55.000
que eu defini aqui no Delphi,

28:55.000 --> 28:57.000
no caso da minha pgtwin.

28:57.000 --> 28:59.000
No caso da minha pgtwin,

28:59.000 --> 29:01.000
ela está escutando na URL

29:01.000 --> 29:03.000
de DelphiMS pedidos.

29:03.000 --> 29:05.000
Então toda vez que eu chamar essa URL

29:05.000 --> 29:07.000
aqui,

29:07.000 --> 29:09.000
ele vai disparar no caso aqui um...

29:09.000 --> 29:11.000
ele vai disparar

29:11.000 --> 29:13.000
aqui um dos verbos HTTP,

29:13.000 --> 29:15.000
que está rodando

29:15.000 --> 29:17.000
no microservice do container.

29:19.000 --> 29:20.000
E...

29:20.000 --> 29:22.000
deixa eu ver se ele já rodou,

29:22.000 --> 29:24.000
já rodou agora os statususas.

29:24.000 --> 29:25.000
Então aqui,

29:25.000 --> 29:27.000
eu vou dar someditar a implementação.

29:27.000 --> 29:29.000
No caso não tem como configurar,

29:29.000 --> 29:31.000
a implementação continua.

29:31.000 --> 29:33.000
Aqui você aponta para um repositório do Git

29:33.000 --> 29:35.000
e toda vez que você dá um PR nele,

29:35.000 --> 29:37.000
ele já atualiza para você.

29:37.000 --> 29:39.000
É como uma fina de...

29:39.000 --> 29:41.000
de conhecimento,

29:41.000 --> 29:43.000
para a gente ver como funciona.

29:43.000 --> 29:45.000
Estou fazendo aqui na mão.

29:45.000 --> 29:47.000
Tô dizendo que a porta do meu container

29:47.000 --> 29:49.000
que já é 8080,

29:49.000 --> 29:51.000
então a Cláudia Ubuntu

29:51.000 --> 29:53.000
tem que estar escutando aqui.

29:53.000 --> 29:55.000
E aqui,

29:55.000 --> 29:57.000
legal,

29:57.000 --> 29:58.000
eu vou deixar.

29:58.000 --> 29:59.000
E esse aqui é o front,

29:59.000 --> 30:01.000
que é reconfigurado em Android.

30:01.000 --> 30:03.000
Esse front só para...

30:03.000 --> 30:05.000
antes de eu atualizar aqui,

30:05.000 --> 30:07.000
eu tenho essa classe aqui onde estão os meus verbos.

30:09.000 --> 30:11.000
E ele erda dessa classe aqui

30:11.000 --> 30:13.000
que só está aguardando a URL.

30:13.000 --> 30:15.000
A URL com a URL.

30:15.000 --> 30:17.000
Então,

30:17.000 --> 30:19.000
ele vai chamar a minha perigueita

30:19.000 --> 30:21.000
e vai chamar

30:21.000 --> 30:23.000
o microserviço de delivery.

30:23.000 --> 30:25.000
E o microserviço de delivery vai comunicar

30:25.000 --> 30:27.000
o microserviço.

30:27.000 --> 30:29.000
Toda vez que eu abro essa página aqui,

30:29.000 --> 30:31.000
ela dá um get.

30:31.000 --> 30:33.000
Então, eu só vou separar aqui

30:33.000 --> 30:35.000
e vou deixar esse cara aqui.

30:39.000 --> 30:41.000
Vou melhorar aqui a disposição.

30:41.000 --> 30:43.000
Então, eu selecionei aqui a nova versão

30:43.000 --> 30:45.000
do...

30:45.000 --> 30:47.000
do container.

30:49.000 --> 30:51.000
Aqui está,

30:51.000 --> 30:53.000
que agora já é 2 minutos atrás.

30:53.000 --> 30:55.000
E vou dar um implementar.

30:57.000 --> 30:59.000
Olha que bacana, ele está implementando.

30:59.000 --> 31:01.000
A Cláudia Luana, que ela está em atualização

31:01.000 --> 31:03.000
e eu não perdi o acesso.

31:03.000 --> 31:05.000
Meu get funcionando.

31:05.000 --> 31:07.000
E olha aqui, ele trabalhando.

31:07.000 --> 31:09.000
Meus equisições estão 100% na versão anterior

31:09.000 --> 31:11.000
de 22 horas atrás, que é o que está com o flagzinho aqui.

31:11.000 --> 31:13.000
E eu não perdi.

31:13.000 --> 31:15.000
Eu consigo fazer até um post aqui.

31:15.000 --> 31:17.000
Para qualquer coisa.

31:19.000 --> 31:21.000
Dá um incluir aqui.

31:21.000 --> 31:23.000
O outro post,

31:23.000 --> 31:25.000
foi, inclusive, pedido 3 aqui,

31:25.000 --> 31:27.000
de uma pedida no Firebase.

31:27.000 --> 31:29.000
Ele continua trabalhando

31:29.000 --> 31:31.000
e assim que ele terminar,

31:31.000 --> 31:33.000
aqui, olha, ele atualizou.

31:33.000 --> 31:35.000
Agora, 100% das equisições já estão na nova versão.

31:37.000 --> 31:39.000
Esse daqui é a Pegate, o que está chamando

31:39.000 --> 31:41.000
a outra Cloud Run.

31:41.000 --> 31:43.000
E o processo para atualizar essa Cloud Run

31:43.000 --> 31:45.000
é a mesma.

31:45.000 --> 31:47.000
Então, eu só vim aqui em um shell.

31:47.000 --> 31:49.000
Mas eu vou voltar a pasta

31:49.000 --> 31:51.000
para ter que ser de dois pontos.

31:51.000 --> 31:53.000
O LCD.

31:53.000 --> 31:55.000
Pedidos.

31:55.000 --> 31:57.000
Underline.

31:57.000 --> 31:59.000
B,

31:59.000 --> 32:01.000
R,

32:01.000 --> 32:03.000
C,

32:03.000 --> 32:05.000
R,

32:05.000 --> 32:07.000
C.

32:07.000 --> 32:09.000
E eu vou botar esse comando do Cloud Build

32:09.000 --> 32:11.000
e só me chamando o Cloud Build dele aqui.

32:11.000 --> 32:13.000
Quanto ele está executando aqui.

32:13.000 --> 32:15.000
E uma coisa que a gente viu nas boas práticas,

32:15.000 --> 32:17.000
né?

32:17.000 --> 32:19.000
Apenas a Pegate deve estar disposta

32:19.000 --> 32:21.000
e o microserviço não.

32:21.000 --> 32:23.000
Os microserviços dentro do orquestrador lá

32:23.000 --> 32:25.000
não deve estar.

32:25.000 --> 32:27.000
Tivesse mais microserviços dentro desse container.

32:27.000 --> 32:29.000
E aqui,

32:29.000 --> 32:31.000
dentro da

32:31.000 --> 32:33.000
do próprio Google,

32:33.000 --> 32:35.000
que se eu executar o comando,

32:35.000 --> 32:37.000
ele vai dar um get, né?

32:37.000 --> 32:39.000
Então, se eu chamar aqui,

32:39.000 --> 32:41.000
eu vou chamar o meu container.

32:41.000 --> 32:43.000
Um pedido de Firebase,

32:43.000 --> 32:45.000
olha, 100% de acesso.

32:45.000 --> 32:47.000
A Pegate eu não sei que chamar ele.

32:51.000 --> 32:53.000
Só esperar terminar de atualizar o container.

32:59.000 --> 33:01.000
Ele está terminando o Build aqui.

33:09.000 --> 33:11.000
Aqui os steps do

33:11.000 --> 33:13.000
do upper file.

33:15.000 --> 33:17.000
Criando

33:23.000 --> 33:25.000
uma target dele.

33:25.000 --> 33:27.000
E finalizou

33:27.000 --> 33:29.000
criação.

33:29.000 --> 33:31.000
E aqui,

33:31.000 --> 33:33.000
a gente vai fazer o mesmo esquema.

33:33.000 --> 33:35.000
A gente está

33:35.000 --> 33:37.000
a nossa Cloud Run do microserviço.

33:39.000 --> 33:41.000
Vem pro orquestrador.

33:41.000 --> 33:43.000
Criando

33:47.000 --> 33:49.000
e vou selecionar aqui a última

33:49.000 --> 33:51.000
versão que eu criei.

33:51.000 --> 33:53.000
E ao salvar,

33:53.000 --> 33:55.000
vou implementar aqui.

33:55.000 --> 33:57.000
Mesma coisa, o mesmo microserviço que está lá

33:57.000 --> 33:59.000
utilizando direto, o Firebase,

33:59.000 --> 34:01.000
continuar funcionando.

34:03.000 --> 34:05.000
Se eu

34:05.000 --> 34:07.000
alterar aqui,

34:07.000 --> 34:09.000
ele continua funcionando

34:09.000 --> 34:11.000
enquanto ele implementa

34:11.000 --> 34:13.000
a nova versão.

34:13.000 --> 34:15.000
Enquanto todos os usuários estão

34:15.000 --> 34:17.000
trabalhando aqui dentro

34:17.000 --> 34:19.000
da versão anterior até

34:19.000 --> 34:21.000
de atualizar de vez.

34:21.000 --> 34:23.000
E o que é legal aqui também,

34:23.000 --> 34:25.000
se eu consigo acessar as métricas

34:25.000 --> 34:27.000
enquanto ele atualiza,

34:27.000 --> 34:29.000
deixa eu ter que esperar.

34:29.000 --> 34:31.000
Não consigo assim.

34:31.000 --> 34:33.000
Opa!

34:33.000 --> 34:35.000
Como é que deu uma trabadinha aqui?

34:37.000 --> 34:39.000
E aqui a gente tem

34:39.000 --> 34:41.000
os relatórios

34:41.000 --> 34:43.000
para a gente ter tomadas de decisões

34:43.000 --> 34:45.000
da Cloud, de como está

34:45.000 --> 34:47.000
as solicitações.

34:47.000 --> 34:49.000
A gente vai terminar de

34:49.000 --> 34:51.000
pedir não a regrupas da chuva.

34:51.000 --> 34:53.000
Mas aqui ele vai ter

34:53.000 --> 34:55.000
a pontagem de solicitações

34:55.000 --> 34:57.000
de containers.

34:57.000 --> 34:59.000
De quantas instâncias ele precisou

34:59.000 --> 35:01.000
utilizar?

35:07.000 --> 35:09.000
A latência que foi, as demoras,

35:09.000 --> 35:11.000
você consegue ter

35:11.000 --> 35:13.000
uma série de informações

35:13.000 --> 35:15.000
da utilização do sumir para o serviço.

35:15.000 --> 35:17.000
Porque toda a estrutura

35:17.000 --> 35:19.000
da sua infraestrutura

35:19.000 --> 35:21.000
é controlada

35:21.000 --> 35:23.000
pelo Google Cloud.

35:25.000 --> 35:27.000
Bom pessoal,

35:27.000 --> 35:29.000
é isso.

35:29.000 --> 35:31.000
Eu não vou entrar tantos detalhes

35:31.000 --> 35:33.000
aqui dos relatórios.

35:33.000 --> 35:35.000
Ele é bem auto-explicativo.

35:35.000 --> 35:37.000
E espero ter conseguido

35:37.000 --> 35:39.000
realmente descomplicar a Cloud

35:39.000 --> 35:41.000
principalmente utilizando Delphi,

35:41.000 --> 35:43.000
que não é uma abordagem muito comum

35:43.000 --> 35:45.000
para a gente,

35:45.000 --> 35:47.000
que é do meio do Delphi.

35:47.000 --> 35:49.000
A gente é mais acostumado

35:49.000 --> 35:51.000
com os monolitos, mas a gente

35:51.000 --> 35:53.000
consegue trabalhar assim

35:53.000 --> 35:55.000
no novo formato

35:55.000 --> 35:57.000
e

35:57.000 --> 35:59.000
é isso, pessoal.

35:59.000 --> 36:01.000
Se alguém tiver dúvidas,

36:01.000 --> 36:03.000
quiser perguntar

36:03.000 --> 36:05.000
um momento e agora.

36:05.000 --> 36:07.000
Vou parar a gravação aqui.

